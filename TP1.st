Object subclass: #Calendario	instanceVariableNames: 'personas eventos recursos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Calendario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	eventos:		<Object>	personas:		<Object>    Implementation Points!!Calendario methodsFor: 'initialization' stamp: 'andre 9/27/2018 17:36'!initialize	personas := LinkedList new.	eventos := LinkedList new.	recursos := LinkedList new.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/25/2018 20:25'!agregarEventoConNombre: nombre invitados: invitados enAnio: unAnio mes: unMes dia: unDia hora: unaHora		| nuevoEvento |		nuevoEvento := Evento inicializarConNombre: nombre  conInvitados: invitados  enAnio: unAnio  enMes: unMes  enDia: unDia  yEnHora: unaHora. 		eventos add: nuevoEvento.	! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/23/2018 16:58'!existePersona: nombrePersona	| nombrePertenece |		nombrePertenece := personas includes: nombrePersona.		^nombrePertenece.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/28/2018 16:21'!agregarRecurso: nombreRecurso	| nuevoRecurso |		nuevoRecurso := Recurso inicializarConNombre: nombreRecurso.	recursos add: nuevoRecurso.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/26/2018 14:45'!getEventos	^eventos.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/28/2018 16:30'!existeRecurso: nombreRecurso		| existe |		existe := recursos anySatisfy: [ :recurso | (recurso getNombre) = nombreRecurso ].		^existe.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/27/2018 11:23'!estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora	| ocupado |		ocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].	 		^ocupado.! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/26/2018 14:38'!agregarEventoSemanalConNombre: nombre semanas: cuantasSemanas invitados: invitados enAnio: unAnio mes: unMes dia: unDia hora: unaHora	| nuevoEventoSemanal |		nuevoEventoSemanal := EventoSemanal inicializarConNombre: nombre  conCantidadSemanas: cuantasSemanas conInvitados: invitados  enAnio: unAnio  enMes: unMes  enDia: unDia  yEnHora: unaHora. 		eventos add: nuevoEventoSemanal.	! !!Calendario methodsFor: 'accessing' stamp: 'andre 9/23/2018 15:46'!agregarPersona: nombrePersona	personas add: nombrePersona.! !Object subclass: #Evento	instanceVariableNames: 'anio dia hora invitados mes nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Evento commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	anio:		<Object>	dia:		<Object>	hora:		<Object>	invitados:		<Object>	mes:		<Object>	nombre:		<Object>    Implementation Points!!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:27'!getNombre	^nombre.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:12'!setNombre: unNombre	nombre:= unNombre.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:30'!getDia	^dia.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:29'!getMes	^mes.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:15'!setAnio: unAnio	anio := unAnio.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:13'!setInvitados: unosInvitados	invitados:= unosInvitados.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/27/2018 11:23'!estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora	| ocupado |	ocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and:                                     [ ( self getAnio ) = unAnio   and:                                     [ ( self getMes ) = unMes   and:                                     [ ( self getDia ) = unDia   and:                                     [ ( self getHora ) = unaHora ] ] ] ] ).	^ocupado.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:18'!setHora: unaHora	hora := unaHora.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:28'!getAnio	^anio.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:29'!getInvitados	^invitados.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:16'!setMes: unMes	mes := unMes.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:17'!setDia: unDia	dia := unDia.! !!Evento methodsFor: 'accesing' stamp: 'andre 9/25/2018 19:30'!getHora	^hora.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Evento class	instanceVariableNames: ''!!Evento class methodsFor: 'initialize' stamp: 'andre 9/25/2018 19:43'!inicializarConNombre: unNombre conInvitados: losInvitados enAnio: unAnio enMes: unMes enDia: unDia yEnHora: unaHora		| nuevoEvento |	nuevoEvento := Evento new.		nuevoEvento setNombre: unNombre .	nuevoEvento setInvitados: losInvitados.	nuevoEvento setAnio: unAnio.	nuevoEvento setMes: unMes.	nuevoEvento setDia: unDia.	nuevoEvento setHora: unaHora.			^nuevoEvento.! !Evento subclass: #EventoSemanal	instanceVariableNames: 'semanas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!EventoSemanal commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	semanas:		<Object>    Implementation Points!!EventoSemanal methodsFor: 'accesing' stamp: 'andre 9/25/2018 20:58'!setSemanas: cantidadSemanas	semanas := cantidadSemanas.! !!EventoSemanal methodsFor: 'accesing' stamp: 'andre 9/27/2018 13:38'!estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora		| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |		fechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.		fechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.		fechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).		ocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: 	[ ( fechaAAnalizar >= fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).		^ocupado.! !!EventoSemanal methodsFor: 'accesing' stamp: 'andre 9/25/2018 20:59'!getSemanas	^semanas.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EventoSemanal class	instanceVariableNames: ''!!EventoSemanal class methodsFor: 'initialize' stamp: 'andre 9/25/2018 21:02'!inicializarConNombre: unNombre conCantidadSemanas: cuantasSemanas conInvitados: losInvitados enAnio: unAnio enMes: unMes enDia: unDia yEnHora: unaHora	| nuevoEvento |	nuevoEvento := EventoSemanal new.		nuevoEvento setNombre: unNombre.	nuevoEvento setSemanas: cuantasSemanas.	nuevoEvento setInvitados: losInvitados.	nuevoEvento setAnio: unAnio.	nuevoEvento setMes: unMes.	nuevoEvento setDia: unDia.	nuevoEvento setHora: unaHora.			^nuevoEvento.! !Object subclass: #Recurso	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Recurso commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Recurso methodsFor: 'accesing' stamp: 'andre 9/27/2018 17:50'!setNombre: nombreRecurso	nombre := nombreRecurso.! !!Recurso methodsFor: 'accesing' stamp: 'andre 9/27/2018 17:49'!getNombre	^nombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Recurso class	instanceVariableNames: ''!!Recurso class methodsFor: 'initialize' stamp: 'andre 9/27/2018 17:51'!inicializarConNombre: nombreRecurso		| nuevoRecurso |	nuevoRecurso := Recurso new.		nuevoRecurso setNombre: nombreRecurso.		^nuevoRecurso.! !
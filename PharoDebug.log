THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named /home/andre/Escritorio/pharolauncher/pharo-vm/lib/pharo/5.0-201805090836/PharoV60.sources.

Please check that the file is named properly and is in the
same directory as this image.
23 September 2018 3:07:59.430519 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named /home/andre/Escritorio/pharol...etc...
		tmp1: 	nil
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named /home/andre/Escritorio/pharol...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named /home/andre/Escritorio/pharolauncher/pharo-vm/lib...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'/home/andre/Escritorio/pharolauncher/pharo-vm/lib/pharo/5.0-201805090836...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


SmalltalkImage class>>startUp:
	Receiver: SmalltalkImage
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 202)
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SmalltalkImage
		classPool: 	a Dictionary(#CompilerClass->OpalCompiler #LastImagePath->'/home/and...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SmalltalkImage)
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		registeredClassName: 	#SmalltalkImage


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SmalltalkImage)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SmalltalkImage)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 ]
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SmalltalkImage)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2018-09-23T15:07:59.415527-03:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		arg1: 	a DefaultExecutionEnvironment
		arg2: 	[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ]
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		arg1: 	[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		arg1: 	[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


ImageCleanerCommandLineHandler>>activate
	Receiver: an ImageCleanerCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: ImageCleanerCommandLineHandler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	CommandLineHandler
		methodDict: 	a MethodDictionary(#activate->ImageCleanerCommandLineHandler>>#acti...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageCleanerCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tool-ImageCleaner'
		traitComposition: 	{}
		localSelectors: 	nil


[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		arg1: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ arg1 activateWith: commandLine ]
	Arguments and temporary variables: 
		arg1: 	Exit
		arg2: 	[ :arg2 | ^ self handleExit: arg2 for: arg1 ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubComm...etc...
		startpc: 	62
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		arg1: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		tmp1: 	an OrderedCollection(ImageCleanerCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		arg1: 	'clean'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]...etc...
	Arguments and temporary variables: 
		arg1: 	Exit
		arg2: 	[ :arg2 | ^ self handleExit: arg2 ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	93
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		arg1: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil


NonInteractiveUIManager(UIManager)>>defer:
	Receiver: a NonInteractiveUIManager
	Arguments and temporary variables: 
		arg1: 	[ super activateWith: arg1 ]
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoCommandLineHandler class>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		arg1: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SmalltalkImage class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ arg1 activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ arg1 activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ arg1 activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ arg1 activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: arg1 ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ arg1 activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arg1 | arg1 first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: arg1 andQuit: arg2 ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ arg1 activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
-- and more not shown ---------------------------------------------------------------------------------


===============================================================================
Notice: Pharo cannot locate the sources file named /home/andre/Escritorio/pharolauncher/pharo-vm/lib/pharo/5.0-201805090836/PharoV60.sources.

Please check that the file is named properly and is in the
same directory as this image.
===============================================================================
THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
23 September 2018 3:15:30.759668 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
23 September 2018 3:15:35.565231 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(82@294) mouseUp 455699 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		event: 	[(82@294) mouseUp 455699 nil]
		nodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
23 September 2018 3:15:35.93899 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(82@294) mouseUp 456101 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		event: 	[(82@294) mouseUp 456101 nil]
		nodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(82@294) mouseUp 456101 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(806004224)
	Receiver's instance variables: 
		timeStamp: 	456101
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(82@294)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(82@294) mouseOver red 456034 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1052)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(804756736) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (719908864) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.705 g: 0.705 b: 0.705 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(82@294) mouseUp 456101 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
		evt: 	[(82@294) mouseUp 456101 nil]
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(82@294) mouseUp 456101 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(82@294) mouseUp 456101 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(806004224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(82@294) mouseDown red 456034 nil]
		firstClickUp: 	[(82@294) mouseUp 456101 nil]
		firstClickTime: 	456034
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	456061


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(82@294) mouseUp 456101 nil]
		evt: 	[(82@294) mouseUp 456101 nil]
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(82@294) mouseUp 456101 nil]
		evtBuf: 	#(1 456101 82 294 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(82@294) corner: (98@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(82@294) corner: (98@310)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(82@294) mouseUp 456101 nil]
		targetOffset: 	(52.0@183.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 456101 82 294 0 0 0 1)
		lastKeyScanCode: 	101
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1052)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1052x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(18512384))(a DropListM...etc...
		lastStepTime: 	456086
		lastStepMessage: 	nil
		lastCycleTime: 	456110
		alarms: 	a Heap()
		lastAlarmTime: 	456086
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
23 September 2018 3:16:06.307259 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(75@288) mouseUp 486456 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(806004224)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(TP1-Test))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		event: 	[(75@288) mouseUp 486456 nil]
		nodeMorph: 	NodeMorph(Node(a RPackageTag(Tests)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(75@288) mouseUp 486456 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(806004224)
	Receiver's instance variables: 
		timeStamp: 	486456
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(75@288)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(806004224)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
	Receiver's instance variables: 
		bounds: 	(30.0@111.0) corner: (437.0@497.0)
		owner: 	a PanelMorph(889112576)
		submorphs: 	an Array(a ScrollBar(125188096) a Morph(690784512) a MorphTreeTransf...etc...
		fullBounds: 	(30@111) corner: (437@497)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (721112064) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(125188096)
		scroller: 	a MorphTreeTransformMorph(190545408)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(410525696)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(916573440)
		notExpandedToggleImage: 	an ImageMorph(953632512)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(690784512)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0). (Color r: 0.13 g: 0.13 ...etc...
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	271.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(75@288) mouseOver red 486405 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1052)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(804756736) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1052)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (719908864) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.705 g: 0.705 b: 0.705 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(75@288) mouseUp 486456 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
		focusHolder: 	a MorphTreeMorph(806004224)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
		evt: 	[(75@288) mouseUp 486456 nil]
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(75@288) mouseUp 486456 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(75@288) mouseUp 486456 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(806004224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(75@288) mouseDown red 486405 nil]
		firstClickUp: 	[(75@288) mouseUp 486456 nil]
		firstClickTime: 	486405
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	486422


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(75@288) mouseUp 486456 nil]
		evt: 	[(75@288) mouseUp 486456 nil]
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(75@288) mouseUp 486456 nil]
		evtBuf: 	#(1 486456 75 288 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(75@288) corner: (91@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(75@288) corner: (91@304)
		color: 	Color blue
		extension: 	a MorphExtension (308272640)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(806004224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(75@288) mouseUp 486456 nil]
		targetOffset: 	(45.0@177.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 486456 75 288 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1052)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1052x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(394552320))(a SearchMorp...etc...
		lastStepTime: 	486441
		lastStepMessage: 	nil
		lastCycleTime: 	486463
		alarms: 	a Heap()
		lastAlarmTime: 	486441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1052)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1052x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(394552320))(a SearchMorp...etc...
		lastStepTime: 	486441
		lastStepMessage: 	nil
		lastCycleTime: 	486463
		alarms: 	a Heap()
		lastAlarmTime: 	486441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1052)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1052x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(394552320))(a SearchMorp...etc...
		lastStepTime: 	486441
		lastStepMessage: 	nil
		lastCycleTime: 	486463
		alarms: 	a Heap()
		lastAlarmTime: 	486441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1052)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1052x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(394552320))(a SearchMorp...etc...
		lastStepTime: 	486441
		lastStepMessage: 	nil
		lastCycleTime: 	486463
		alarms: 	a Heap()
		lastAlarmTime: 	486441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1052)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(804756736) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1052)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (719908864) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.705 g: 0.705 b: 0.705 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#new was sent to nil
23 September 2018 3:20:57.021268 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #new
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: receiver of "new" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		calendario: 	nil
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#new was sent to nil
23 September 2018 3:21:05.329347 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #new
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: receiver of "new" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		calendario: 	nil
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:21:05.304388-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:21:05.304388-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCale...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Test'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test01ExisteJuanDeberiaSerFalsoCuandoCreo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(414767360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(267131648)
		submorphs: 	an Array(an ImageMorph(468971008))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (733163264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(468971008)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(414767360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(267131648)
		submorphs: 	an Array(an ImageMorph(468971008))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (733163264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(468971008)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(414767360)
	Arguments and temporary variables: 
		evt: 	[(1383@97) mouseUp 785466 nil]
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(267131648)
		submorphs: 	an Array(an ImageMorph(468971008))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (733163264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(468971008)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(414767360)
	Arguments and temporary variables: 
		anEvent: 	[(1383@97) mouseUp 785466 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(267131648)
		submorphs: 	an Array(an ImageMorph(468971008))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (733163264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(468971008)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1383@97) mouseUp 785466 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(414767360)
	Receiver's instance variables: 
		timeStamp: 	785466
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1383@97)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #new
CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existePersona:
23 September 2018 3:24:28.623371 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existePersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existePersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>existePersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:24:28.609127-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:24:28.609127-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCale...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Test'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(451033856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(984902144)
		submorphs: 	an Array(an ImageMorph(447565824))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (679746816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(447565824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(451033856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(984902144)
		submorphs: 	an Array(an ImageMorph(447565824))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (679746816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(447565824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(451033856)
	Arguments and temporary variables: 
		evt: 	[(1385@100) mouseUp 988782 nil]
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(984902144)
		submorphs: 	an Array(an ImageMorph(447565824))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (679746816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(447565824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(451033856)
	Arguments and temporary variables: 
		anEvent: 	[(1385@100) mouseUp 988782 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(984902144)
		submorphs: 	an Array(an ImageMorph(447565824))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (679746816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(447565824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1385@100) mouseUp 988782 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(451033856)
	Receiver's instance variables: 
		timeStamp: 	988782
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1385@100)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existePersona:
CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existePersona:
23 September 2018 3:24:56.302367 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existePersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existePersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>existePersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:24:56.282228-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:24:56.282228-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCu...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCale...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Test'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(363021568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(857210368)
		submorphs: 	an Array(an ImageMorph(156926720))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (359883264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(156926720)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(363021568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(857210368)
		submorphs: 	an Array(an ImageMorph(156926720))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (359883264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(156926720)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(363021568)
	Arguments and temporary variables: 
		evt: 	[(1387@97) mouseUp 1016453 nil]
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(857210368)
		submorphs: 	an Array(an ImageMorph(156926720))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (359883264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(156926720)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(363021568)
	Arguments and temporary variables: 
		anEvent: 	[(1387@97) mouseUp 1016453 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		owner: 	a FTCellMorph(857210368)
		submorphs: 	an Array(an ImageMorph(156926720))
		fullBounds: 	(1376.0@85.0) corner: (1392.0@101.0)
		color: 	Color transparent
		extension: 	a MorphExtension (359883264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(156926720)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1387@97) mouseUp 1016453 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(363021568)
	Receiver's instance variables: 
		timeStamp: 	1016453
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1387@97)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existePersona:
CalendarioTest>>test01ExisteJuanDeberiaSerFalsoCuandoCreoElCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existePersona:
23 September 2018 3:29:34.037396 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existePersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existePersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>existePersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:29:33.988328-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01CalendarioNoDeberiaExistirJ...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:29:33.988328-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test01CalendarioNoDeberiaExistirJ...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(559212288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(752616960)
		submorphs: 	an Array(an ImageMorph(843206912))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (538010368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(843206912)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(559212288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(752616960)
		submorphs: 	an Array(an ImageMorph(843206912))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (538010368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(843206912)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(559212288)
	Arguments and temporary variables: 
		evt: 	[(978@211) mouseUp 174097 nil]
	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(752616960)
		submorphs: 	an Array(an ImageMorph(843206912))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (538010368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(843206912)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(559212288)
	Arguments and temporary variables: 
		anEvent: 	[(978@211) mouseUp 174097 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(752616960)
		submorphs: 	an Array(an ImageMorph(843206912))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (538010368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(843206912)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(978@211) mouseUp 174097 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(559212288)
	Receiver's instance variables: 
		timeStamp: 	174097
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(978@211)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existePersona:
CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarPersona:
23 September 2018 3:30:37.995696 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarPersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarPersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>agregarPersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

PruebasCalendario>>test01AgregarPersonas
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test01AgregarPersonas
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:30:37.945716-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test01AgregarPersonas)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test01AgregarPersonas
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:30:37.945716-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test01AgregarPersonas)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test01AgregarPersonas
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01AgregarPersonas
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test01AgregarPersonas
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test01AgregarPersonas
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test01AgregarPersonas
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1033257728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(340148480)
		submorphs: 	an Array(an ImageMorph(259366400))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (855441152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test01AgregarPersonas. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(259366400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1033257728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(340148480)
		submorphs: 	an Array(an ImageMorph(259366400))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (855441152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test01AgregarPersonas. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(259366400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1033257728)
	Arguments and temporary variables: 
		evt: 	[(969@216) mouseUp 238051 nil]
	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(340148480)
		submorphs: 	an Array(an ImageMorph(259366400))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (855441152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test01AgregarPersonas. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(259366400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1033257728)
	Arguments and temporary variables: 
		anEvent: 	[(969@216) mouseUp 238051 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(967.0@207.0) corner: (983.0@223.0)
		owner: 	a FTCellMorph(340148480)
		submorphs: 	an Array(an ImageMorph(259366400))
		fullBounds: 	(967.0@207.0) corner: (983.0@223.0)
		color: 	Color transparent
		extension: 	a MorphExtension (855441152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test01AgregarPersonas. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(259366400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(969@216) mouseUp 238051 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1033257728)
	Receiver's instance variables: 
		timeStamp: 	238051
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(969@216)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarPersona:
PruebasCalendario>>test01AgregarPersonas
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarPersona:
23 September 2018 3:35:20.777543 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarPersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarPersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>agregarPersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:35:20.736421-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:35:20.736421-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(25755648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		owner: 	a FTCellMorph(397699072)
		submorphs: 	an Array(an ImageMorph(89482240))
		fullBounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		color: 	Color transparent
		extension: 	a MorphExtension (691874048) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(89482240)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(25755648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		owner: 	a FTCellMorph(397699072)
		submorphs: 	an Array(an ImageMorph(89482240))
		fullBounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		color: 	Color transparent
		extension: 	a MorphExtension (691874048) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(89482240)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(25755648)
	Arguments and temporary variables: 
		evt: 	[(1370@104) mouseUp 520843 nil]
	Receiver's instance variables: 
		bounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		owner: 	a FTCellMorph(397699072)
		submorphs: 	an Array(an ImageMorph(89482240))
		fullBounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		color: 	Color transparent
		extension: 	a MorphExtension (691874048) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(89482240)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(25755648)
	Arguments and temporary variables: 
		anEvent: 	[(1370@104) mouseUp 520843 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		owner: 	a FTCellMorph(397699072)
		submorphs: 	an Array(an ImageMorph(89482240))
		fullBounds: 	(1359.0@96.0) corner: (1375.0@112.0)
		color: 	Color transparent
		extension: 	a MorphExtension (691874048) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(89482240)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1370@104) mouseUp 520843 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(25755648)
	Receiver's instance variables: 
		timeStamp: 	520843
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1370@104)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarPersona:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarPersona:
23 September 2018 3:35:50.180032 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarPersona:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarPersona: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>agregarPersona:
		resumeValue: 	nil
	Receiver's instance variables: 
a Calendario

CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:35:50.148601-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:35:50.148601-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(9356288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(733040128)
		submorphs: 	an Array(an ImageMorph(814200320))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (503006720) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(814200320)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(9356288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(733040128)
		submorphs: 	an Array(an ImageMorph(814200320))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (503006720) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(814200320)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(9356288)
	Arguments and temporary variables: 
		evt: 	[(1299@116) mouseUp 550266 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(733040128)
		submorphs: 	an Array(an ImageMorph(814200320))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (503006720) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(814200320)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(9356288)
	Arguments and temporary variables: 
		anEvent: 	[(1299@116) mouseUp 550266 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(733040128)
		submorphs: 	an Array(an ImageMorph(814200320))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (503006720) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(814200320)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1299@116) mouseUp 550266 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(9356288)
	Receiver's instance variables: 
		timeStamp: 	550266
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1299@116)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarPersona:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:37:37.552347 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:37:37.521738-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:37:37.521738-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test02CalendarioDeberiaExistirJuanLuegoDe...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(246822912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(492049408)
		submorphs: 	an Array(an ImageMorph(69678848))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (716230144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(69678848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(246822912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(492049408)
		submorphs: 	an Array(an ImageMorph(69678848))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (716230144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(69678848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(246822912)
	Arguments and temporary variables: 
		evt: 	[(1298@116) mouseUp 657632 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(492049408)
		submorphs: 	an Array(an ImageMorph(69678848))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (716230144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(69678848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(246822912)
	Arguments and temporary variables: 
		anEvent: 	[(1298@116) mouseUp 657632 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(492049408)
		submorphs: 	an Array(an ImageMorph(69678848))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (716230144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(69678848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1298@116) mouseUp 657632 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(246822912)
	Receiver's instance variables: 
		timeStamp: 	657632
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1298@116)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:37:49.756183 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:37:49.725908-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:37:49.725908-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test02CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(438641920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(1021161216)
		submorphs: 	an Array(an ImageMorph(917649920))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (792420864) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(917649920)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(438641920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(1021161216)
		submorphs: 	an Array(an ImageMorph(917649920))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (792420864) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(917649920)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(438641920)
	Arguments and temporary variables: 
		evt: 	[(1296@121) mouseUp 669827 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(1021161216)
		submorphs: 	an Array(an ImageMorph(917649920))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (792420864) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(917649920)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(438641920)
	Arguments and temporary variables: 
		anEvent: 	[(1296@121) mouseUp 669827 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(1021161216)
		submorphs: 	an Array(an ImageMorph(917649920))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (792420864) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(917649920)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1296@121) mouseUp 669827 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(438641920)
	Receiver's instance variables: 
		timeStamp: 	669827
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1296@121)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:38:51.235444 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:38:51.205498-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:38:51.205498-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(233846272)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(363251200)
		submorphs: 	an Array(an ImageMorph(272878336))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (317282816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(272878336)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(233846272)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(363251200)
		submorphs: 	an Array(an ImageMorph(272878336))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (317282816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(272878336)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(233846272)
	Arguments and temporary variables: 
		evt: 	[(1294@117) mouseUp 731304 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(363251200)
		submorphs: 	an Array(an ImageMorph(272878336))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (317282816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(272878336)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(233846272)
	Arguments and temporary variables: 
		anEvent: 	[(1294@117) mouseUp 731304 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(363251200)
		submorphs: 	an Array(an ImageMorph(272878336))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (317282816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(272878336)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1294@117) mouseUp 731304 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(233846272)
	Receiver's instance variables: 
		timeStamp: 	731304
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1294@117)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:39:33.634695 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:39:33.604891-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:39:33.604891-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test02CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(746584576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(353598976)
		submorphs: 	an Array(an ImageMorph(540349696))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1026768640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(540349696)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(746584576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(353598976)
		submorphs: 	an Array(an ImageMorph(540349696))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1026768640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(540349696)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(746584576)
	Arguments and temporary variables: 
		evt: 	[(1294@121) mouseUp 773712 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(353598976)
		submorphs: 	an Array(an ImageMorph(540349696))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1026768640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(540349696)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(746584576)
	Arguments and temporary variables: 
		anEvent: 	[(1294@121) mouseUp 773712 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(353598976)
		submorphs: 	an Array(an ImageMorph(540349696))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1026768640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(540349696)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1294@121) mouseUp 773712 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(746584576)
	Receiver's instance variables: 
		timeStamp: 	773712
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1294@121)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:40:07.306003 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:40:19.054333 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:40:19.025968-03:00
		failures: 	a Set(CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse)...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:40:19.025968-03:00
		failures: 	a Set(CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse)...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test01CalendarioNoDebe...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1036255232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(1014393088)
		submorphs: 	an Array(an ImageMorph(284425216))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (38424832) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(284425216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1036255232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(1014393088)
		submorphs: 	an Array(an ImageMorph(284425216))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (38424832) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(284425216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1036255232)
	Arguments and temporary variables: 
		evt: 	[(1297@102) mouseUp 819137 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(1014393088)
		submorphs: 	an Array(an ImageMorph(284425216))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (38424832) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(284425216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1036255232)
	Arguments and temporary variables: 
		anEvent: 	[(1297@102) mouseUp 819137 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(1014393088)
		submorphs: 	an Array(an ImageMorph(284425216))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (38424832) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(284425216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:40:37.674424 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:40:37.644838-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:40:37.644838-03:00
		failures: 	a Set(CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgreg...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(408963584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(433574400)
		submorphs: 	an Array(an ImageMorph(896702208))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (909929984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(896702208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(408963584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(433574400)
		submorphs: 	an Array(an ImageMorph(896702208))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (909929984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(896702208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(408963584)
	Arguments and temporary variables: 
		evt: 	[(1297@119) mouseUp 837756 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(433574400)
		submorphs: 	an Array(an ImageMorph(896702208))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (909929984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(896702208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(408963584)
	Arguments and temporary variables: 
		anEvent: 	[(1297@119) mouseUp 837756 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		owner: 	a FTCellMorph(433574400)
		submorphs: 	an Array(an ImageMorph(896702208))
		fullBounds: 	(1288.0@109.0) corner: (1304.0@125.0)
		color: 	Color transparent
		extension: 	a MorphExtension (909929984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(896702208)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1297@119) mouseUp 837756 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(408963584)
	Receiver's instance variables: 
		timeStamp: 	837756
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1297@119)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 3:41:10.273544 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:41:10.244129-03:00
		failures: 	a Set(CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse)...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T15:41:10.244129-03:00
		failures: 	a Set(CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse)...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test01CalendarioNoDeberiaExistirJuanAlCrearse
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test01CalendarioNoDebe...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(649057280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(388875776)
		submorphs: 	an Array(an ImageMorph(695831296))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (718420224) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(695831296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(649057280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(388875776)
		submorphs: 	an Array(an ImageMorph(695831296))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (718420224) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(695831296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(649057280)
	Arguments and temporary variables: 
		evt: 	[(1295@97) mouseUp 870340 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(388875776)
		submorphs: 	an Array(an ImageMorph(695831296))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (718420224) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(695831296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(649057280)
	Arguments and temporary variables: 
		anEvent: 	[(1295@97) mouseUp 870340 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		owner: 	a FTCellMorph(388875776)
		submorphs: 	an Array(an ImageMorph(695831296))
		fullBounds: 	(1288.0@89.0) corner: (1304.0@105.0)
		color: 	Color transparent
		extension: 	a MorphExtension (718420224) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test01CalendarioNoDeberiaExistirJuanAlCrearse. tru...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(695831296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test01CalendarioNoDeberiaExistirJuanAlCrearse
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarEventoConNombre:invitados:enAnio:mes:dia:hora:
23 September 2018 5:52:20.208092 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarEventoConNombre:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarEventoConNombre: 'Siesta' invitados: an OrderedCollection('Ped...etc...
		exception: 	MessageNotUnderstood: Calendario>>agregarEventoConNombre:invitados:e...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T17:52:20.161891-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T17:52:20.161891-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(282938624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(43363328)
		submorphs: 	an Array(an ImageMorph(825094656))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1068001792) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(825094656)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(282938624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(43363328)
		submorphs: 	an Array(an ImageMorph(825094656))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1068001792) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(825094656)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(282938624)
	Arguments and temporary variables: 
		evt: 	[(1299@143) mouseUp 8740271 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(43363328)
		submorphs: 	an Array(an ImageMorph(825094656))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1068001792) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(825094656)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(282938624)
	Arguments and temporary variables: 
		anEvent: 	[(1299@143) mouseUp 8740271 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(43363328)
		submorphs: 	an Array(an ImageMorph(825094656))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1068001792) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(825094656)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1299@143) mouseUp 8740271 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(282938624)
	Receiver's instance variables: 
		timeStamp: 	8740271
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1299@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarEventoConNombre:invitados:enAnio:mes:dia:hora:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #estaOcupado:enAnio:mes:dia:hora:
23 September 2018 6:00:34.425105 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	estaOcupado: 'Pedro' enAnio: 2019 mes: 5 dia: 4 hora: 10
		exception: 	MessageNotUnderstood: Calendario>>estaOcupado:enAnio:mes:dia:hora:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:00:34.413079-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:00:34.413079-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03CalendarioDeberiaTenerUnEventoConNo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(319056640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(892160000)
		submorphs: 	an Array(an ImageMorph(79912448))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (913653504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(79912448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(319056640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(892160000)
		submorphs: 	an Array(an ImageMorph(79912448))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (913653504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(79912448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(319056640)
	Arguments and temporary variables: 
		evt: 	[(1291@138) mouseUp 9234528 nil]
	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(892160000)
		submorphs: 	an Array(an ImageMorph(79912448))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (913653504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(79912448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(319056640)
	Arguments and temporary variables: 
		anEvent: 	[(1291@138) mouseUp 9234528 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		owner: 	a FTCellMorph(892160000)
		submorphs: 	an Array(an ImageMorph(79912448))
		fullBounds: 	(1288.0@129.0) corner: (1304.0@145.0)
		color: 	Color transparent
		extension: 	a MorphExtension (913653504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(79912448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1291@138) mouseUp 9234528 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(319056640)
	Receiver's instance variables: 
		timeStamp: 	9234528
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1291@138)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #estaOcupado:enAnio:mes:dia:hora:
23 September 2018 6:02:49.430746 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	estaOcupado: 'Pedro' enAnio: 2019 mes: 5 dia: 4 hora: 10
		exception: 	MessageNotUnderstood: Calendario>>estaOcupado:enAnio:mes:dia:hora:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:02:49.407915-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:02:49.407915-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03CalendarioDeberiaTenerUnEventoConNo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(232300032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(609942528)
		submorphs: 	an Array(an ImageMorph(135692800))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1037417216) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(135692800)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(232300032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(609942528)
		submorphs: 	an Array(an ImageMorph(135692800))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1037417216) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(135692800)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(232300032)
	Arguments and temporary variables: 
		evt: 	[(982@126) mouseUp 9369502 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(609942528)
		submorphs: 	an Array(an ImageMorph(135692800))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1037417216) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(135692800)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(232300032)
	Arguments and temporary variables: 
		anEvent: 	[(982@126) mouseUp 9369502 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(609942528)
		submorphs: 	an Array(an ImageMorph(135692800))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1037417216) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(135692800)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(982@126) mouseUp 9369502 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(232300032)
	Receiver's instance variables: 
		timeStamp: 	9369502
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(982@126)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #estaOcupado:enAnio:mes:dia:hora:
23 September 2018 6:10:48.843136 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	estaOcupado: 'Pedro' enAnio: 2019 mes: 5 dia: 4 hora: 10
		exception: 	MessageNotUnderstood: Calendario>>estaOcupado:enAnio:mes:dia:hora:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:10:48.79529-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:10:48.79529-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(731539456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(676414976)
		submorphs: 	an Array(an ImageMorph(218573312))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (293294848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(218573312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(731539456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(676414976)
		submorphs: 	an Array(an ImageMorph(218573312))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (293294848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(218573312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(731539456)
	Arguments and temporary variables: 
		evt: 	[(978@117) mouseUp 9848892 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(676414976)
		submorphs: 	an Array(an ImageMorph(218573312))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (293294848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(218573312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(731539456)
	Arguments and temporary variables: 
		anEvent: 	[(978@117) mouseUp 9848892 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(676414976)
		submorphs: 	an Array(an ImageMorph(218573312))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (293294848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(218573312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(978@117) mouseUp 9848892 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(731539456)
	Receiver's instance variables: 
		timeStamp: 	9848892
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(978@117)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #ifFalse:
23 September 2018 6:11:59.544023 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #ifFalse:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	ifFalse: self
		exception: 	MessageNotUnderstood: Calendario>>ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		arg1: 	CalendarioTest(TestAsserter)>>assert:
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


Calendario(Object)>>mustBeBooleanInMagic:
	Receiver: a Calendario
	Arguments and temporary variables: 
		context: 	CalendarioTest(TestAsserter)>>assert:
		sendNode: 	RBMessageNode(aBoolean
	ifFalse: [ self logFailure: 'Assertion failed...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ (ThisContext namedTempAt: 1)
	...etc...
		method: 	TestAsserter>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


Calendario(Object)>>mustBeBoolean
	Receiver: a Calendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBoolean: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:11:59.516416-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:11:59.516416-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03CalendarioDeberiaTenerUnEventoConNo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(357900288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(274345472)
		submorphs: 	an Array(an ImageMorph(280989184))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (271093504) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(280989184)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #ifFalse:
CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
Calendario(Object)>>mustBeBooleanInMagic:
Calendario(Object)>>mustBeBoolean
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #ifFalse:
23 September 2018 6:13:07.031478 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #ifFalse:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	ifFalse: self
		exception: 	MessageNotUnderstood: Calendario>>ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		arg1: 	CalendarioTest(TestAsserter)>>assert:
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


Calendario(Object)>>mustBeBooleanInMagic:
	Receiver: a Calendario
	Arguments and temporary variables: 
		context: 	CalendarioTest(TestAsserter)>>assert:
		sendNode: 	RBMessageNode(aBoolean
	ifFalse: [ self logFailure: 'Assertion failed...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ (ThisContext namedTempAt: 1)
	...etc...
		method: 	TestAsserter>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


Calendario(Object)>>mustBeBoolean
	Receiver: a Calendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBoolean: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:13:06.994259-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:13:06.994259-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03CalendarioDeberiaTenerUnEventoConNo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(426235904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(1010042624)
		submorphs: 	an Array(an ImageMorph(79414016))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (52699648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(79414016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #ifFalse:
CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
Calendario(Object)>>mustBeBooleanInMagic:
Calendario(Object)>>mustBeBoolean
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #ifFalse:
23 September 2018 6:13:22.537016 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #ifFalse:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	ifFalse: self
		exception: 	MessageNotUnderstood: Calendario>>ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		arg1: 	CalendarioTest(TestAsserter)>>assert:
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


Calendario(Object)>>mustBeBooleanInMagic:
	Receiver: a Calendario
	Arguments and temporary variables: 
		context: 	CalendarioTest(TestAsserter)>>assert:
		sendNode: 	RBMessageNode(aBoolean
	ifFalse: [ self logFailure: 'Assertion failed...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ (ThisContext namedTempAt: 1)
	...etc...
		method: 	TestAsserter>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


Calendario(Object)>>mustBeBoolean
	Receiver: a Calendario
	Arguments and temporary variables: 

	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')


CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBoolean: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:13:22.520545-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:13:22.520545-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(849286912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(98324992)
		submorphs: 	an Array(an ImageMorph(979269632))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (274060288) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(979269632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #ifFalse:
CalendarioTest(TestAsserter)>>ExecuteUnOptimizedIn:
Calendario(Object)>>mustBeBooleanInMagic:
Calendario(Object)>>mustBeBoolean
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 6:14:40.00311 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:14:39.95574-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:14:39.95574-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(646572544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(679908096)
		submorphs: 	an Array(an ImageMorph(1027690240))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (182916352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1027690240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(646572544)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(679908096)
		submorphs: 	an Array(an ImageMorph(1027690240))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (182916352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1027690240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(646572544)
	Arguments and temporary variables: 
		evt: 	[(977@123) mouseUp 10080051 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(679908096)
		submorphs: 	an Array(an ImageMorph(1027690240))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (182916352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1027690240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(646572544)
	Arguments and temporary variables: 
		anEvent: 	[(977@123) mouseUp 10080051 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(679908096)
		submorphs: 	an Array(an ImageMorph(1027690240))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (182916352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1027690240)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 6:15:05.76252 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:15:05.728913-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:15:05.728913-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn2019054...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(998331648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(37162496)
		submorphs: 	an Array(an ImageMorph(771879680))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (37097728) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(771879680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(998331648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(37162496)
		submorphs: 	an Array(an ImageMorph(771879680))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (37097728) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(771879680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(998331648)
	Arguments and temporary variables: 
		evt: 	[(980@114) mouseUp 10105825 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(37162496)
		submorphs: 	an Array(an ImageMorph(771879680))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (37097728) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(771879680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(998331648)
	Arguments and temporary variables: 
		anEvent: 	[(980@114) mouseUp 10105825 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(37162496)
		submorphs: 	an Array(an ImageMorph(771879680))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (37097728) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(771879680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEn201905411
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 6:41:07.983705 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:41:07.952091-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T18:41:07.952091-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAni...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(394371584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		owner: 	a FTCellMorph(614222080)
		submorphs: 	an Array(an ImageMorph(157110016))
		fullBounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		color: 	Color transparent
		extension: 	a MorphExtension (219313664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(157110016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(394371584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		owner: 	a FTCellMorph(614222080)
		submorphs: 	an Array(an ImageMorph(157110016))
		fullBounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		color: 	Color transparent
		extension: 	a MorphExtension (219313664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(157110016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(394371584)
	Arguments and temporary variables: 
		evt: 	[(2797@147) mouseUp 11668056 nil]
	Receiver's instance variables: 
		bounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		owner: 	a FTCellMorph(614222080)
		submorphs: 	an Array(an ImageMorph(157110016))
		fullBounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		color: 	Color transparent
		extension: 	a MorphExtension (219313664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(157110016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(394371584)
	Arguments and temporary variables: 
		anEvent: 	[(2797@147) mouseUp 11668056 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		owner: 	a FTCellMorph(614222080)
		submorphs: 	an Array(an ImageMorph(157110016))
		fullBounds: 	(2788.0@136.0) corner: (2804.0@152.0)
		color: 	Color transparent
		extension: 	a MorphExtension (219313664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(157110016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#new was sent to nil
23 September 2018 9:15:39.777824 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #new
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: receiver of "new" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	nil
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:15:39.730654-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:15:39.730654-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test04SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(483767296)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		owner: 	a FTCellMorph(832265472)
		submorphs: 	an Array(an ImageMorph(888898304))
		fullBounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (747831552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(888898304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(483767296)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		owner: 	a FTCellMorph(832265472)
		submorphs: 	an Array(an ImageMorph(888898304))
		fullBounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (747831552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(888898304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(483767296)
	Arguments and temporary variables: 
		evt: 	[(2800@163) mouseUp 20939831 nil]
	Receiver's instance variables: 
		bounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		owner: 	a FTCellMorph(832265472)
		submorphs: 	an Array(an ImageMorph(888898304))
		fullBounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (747831552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(888898304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(483767296)
	Arguments and temporary variables: 
		anEvent: 	[(2800@163) mouseUp 20939831 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		owner: 	a FTCellMorph(832265472)
		submorphs: 	an Array(an ImageMorph(888898304))
		fullBounds: 	(2788.0@156.0) corner: (2804.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (747831552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(888898304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2800@163) mouseUp 20939831 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(483767296)
	Receiver's instance variables: 
		timeStamp: 	20939831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2800@163)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #new
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 9:38:39.751736 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:38:39.703862-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:38:39.703862-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAni...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 
		evt: 	[(980@124) mouseUp 22319819 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 
		anEvent: 	[(980@124) mouseUp 22319819 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 9:38:40.260708 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:38:40.253941-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:38:40.253941-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAni...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 
		evt: 	[(980@124) mouseUp 22320351 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(906057216)
	Arguments and temporary variables: 
		anEvent: 	[(980@124) mouseUp 22320351 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(301114880)
		submorphs: 	an Array(an ImageMorph(545294848))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (386462464) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(545294848)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 September 2018 9:41:44.381151 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:41:44.352739-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:41:44.352739-03:00
		failures: 	a Set(CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAni...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(218661120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(511244800)
		submorphs: 	an Array(an ImageMorph(154207744))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834565632) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(154207744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(218661120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(511244800)
		submorphs: 	an Array(an ImageMorph(154207744))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834565632) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(154207744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(218661120)
	Arguments and temporary variables: 
		evt: 	[(986@125) mouseUp 22504455 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(511244800)
		submorphs: 	an Array(an ImageMorph(154207744))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834565632) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(154207744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(218661120)
	Arguments and temporary variables: 
		anEvent: 	[(986@125) mouseUp 22504455 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@112.0) corner: (987.0@128.0)
		owner: 	a FTCellMorph(511244800)
		submorphs: 	an Array(an ImageMorph(154207744))
		fullBounds: 	(971.0@112.0) corner: (987.0@128.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834565632) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(154207744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
23 September 2018 9:44:49.287009 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:44:49.254773-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:44:49.254773-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(573198848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(143813376)
		submorphs: 	an Array(an ImageMorph(950874880))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (858575104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(950874880)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(573198848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(143813376)
		submorphs: 	an Array(an ImageMorph(950874880))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (858575104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(950874880)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(573198848)
	Arguments and temporary variables: 
		evt: 	[(984@143) mouseUp 22689351 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(143813376)
		submorphs: 	an Array(an ImageMorph(950874880))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (858575104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(950874880)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(573198848)
	Arguments and temporary variables: 
		anEvent: 	[(984@143) mouseUp 22689351 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(143813376)
		submorphs: 	an Array(an ImageMorph(950874880))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (858575104) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(950874880)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(984@143) mouseUp 22689351 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(573198848)
	Receiver's instance variables: 
		timeStamp: 	22689351
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(984@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #nombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
23 September 2018 9:45:37.369128 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#nombre->Evento>>#nombre )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:45:37.333338-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T21:45:37.333338-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test04SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(800148224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(51816960)
		submorphs: 	an Array(an ImageMorph(125459712))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (850212608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(125459712)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(800148224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(51816960)
		submorphs: 	an Array(an ImageMorph(125459712))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (850212608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(125459712)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(800148224)
	Arguments and temporary variables: 
		evt: 	[(975@140) mouseUp 22737443 nil]
	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(51816960)
		submorphs: 	an Array(an ImageMorph(125459712))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (850212608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(125459712)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(800148224)
	Arguments and temporary variables: 
		anEvent: 	[(975@140) mouseUp 22737443 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(971.0@132.0) corner: (987.0@148.0)
		owner: 	a FTCellMorph(51816960)
		submorphs: 	an Array(an ImageMorph(125459712))
		fullBounds: 	(971.0@132.0) corner: (987.0@148.0)
		color: 	Color transparent
		extension: 	a MorphExtension (850212608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(125459712)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(975@140) mouseUp 22737443 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(800148224)
	Receiver's instance variables: 
		timeStamp: 	22737443
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(975@140)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #nombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento did not understand #invitados
23 September 2018 10:01:41.923166 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento(Object)>>doesNotUnderstand: #invitados
	Receiver: an Evento
	Arguments and temporary variables: 
		aMessage: 	invitados
		exception: 	MessageNotUnderstood: Evento>>invitados
		resumeValue: 	nil
	Receiver's instance variables: 
an Evento

CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	an Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:01:41.910935-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:01:41.910935-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test03CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(963545344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(654.0@152.0) corner: (670.0@168.0)
		owner: 	a FTCellMorph(99554816)
		submorphs: 	an Array(an ImageMorph(609512448))
		fullBounds: 	(654.0@152.0) corner: (670.0@168.0)
		color: 	Color transparent
		extension: 	a MorphExtension (582746112) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(609512448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(963545344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(654.0@152.0) corner: (670.0@168.0)
		owner: 	a FTCellMorph(99554816)
		submorphs: 	an Array(an ImageMorph(609512448))
		fullBounds: 	(654.0@152.0) corner: (670.0@168.0)
		color: 	Color transparent
		extension: 	a MorphExtension (582746112) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(609512448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(963545344)
	Arguments and temporary variables: 
		evt: 	[(660@161) mouseUp 23702011 nil]
	Receiver's instance variables: 
		bounds: 	(654.0@152.0) corner: (670.0@168.0)
		owner: 	a FTCellMorph(99554816)
		submorphs: 	an Array(an ImageMorph(609512448))
		fullBounds: 	(654.0@152.0) corner: (670.0@168.0)
		color: 	Color transparent
		extension: 	a MorphExtension (582746112) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(609512448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(963545344)
	Arguments and temporary variables: 
		anEvent: 	[(660@161) mouseUp 23702011 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(654.0@152.0) corner: (670.0@168.0)
		owner: 	a FTCellMorph(99554816)
		submorphs: 	an Array(an ImageMorph(609512448))
		fullBounds: 	(654.0@152.0) corner: (670.0@168.0)
		color: 	Color transparent
		extension: 	a MorphExtension (582746112) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(609512448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(660@161) mouseUp 23702011 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(963545344)
	Receiver's instance variables: 
		timeStamp: 	23702011
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(660@161)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento(Object)>>doesNotUnderstand: #invitados
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
23 September 2018 10:11:32.674711 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	'nombre invitados anio mes hora'
		d: 	''
		s: 	''
		cat: 	'TP1'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	'nombre invitados anio mes hora'
		d: 	''
		s: 	''
		cat: 	'TP1'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	'nombre invitados anio mes hora'
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'TP1'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


[ | newClass |
"Create the class and set the trait composition"
newClass := aBlock value.
newClass setTraitComposition: aTraitComposition asTraitComposition.
SystemAnnouncer uniqueInstance classModificationAppliedTo: newClass.
newClass ] in Object class(Class)>>subclass:uses:with:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
		newClass: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#NameOfSubclass
		aPresentBlock: 	[ :old | 
| copyOfOld newClass |
copyOfOld := old copy.

"Modify...etc...
		anAbsentBlock: 	[ | newClass |
"Create the class and set the trait composition"
...etc...
	Receiver's instance variables: 
		tally: 	6636
		array: 	an Array(#UTF8InvalidText->UTF8InvalidText #GTSpotterDebuggingExceptionH...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Object class(Class)>>subclass:uses:with:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	'nombre invitados anio mes hora'
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'TP1'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	'nombre invitados anio mes hora'
		d: 	''
		s: 	''
		cat: 	'TP1'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: Object
	Arguments and temporary variables: 
		aSubclassSymbol: 	#NameOfSubclass
		instVarNames: 	'nombre invitados anio mes hora'
		classVarNames: 	''
		aPackageSymbol: 	'TP1'
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 408)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object
		subclass: #NameOfSubclass
		instanceVariableNames: 'nombr...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''nombre inv...etc...
		aController: 	a RubScrolledTextMorph(217505024)
		aClass: 	nil
		oldClass: 	nil
		class: 	nil
		newClassName: 	'NameOfSubclass'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#NameOfSubclass' 'instanc...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(89 to: 88)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''nombre inv...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(89 to: 88)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


ClassDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassDefinitionAcceptor
	Arguments and temporary variables: 
		aText: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''nombre invit...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		model: 	a NautilusUI


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''nombre invit...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(89 to: 88)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(89 to: 88)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a NautilusUI
		action: 	MessageSend(#whenTextAcceptedInView: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento did not understand #nombre
23 September 2018 10:18:34.677323 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento(Object)>>doesNotUnderstand: #nombre
	Receiver: an Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		eventoNombre: 	nil
		eventoInvitados: 	nil
		eventoAnio: 	nil
		eventoMes: 	nil
		eventoDia: 	nil
		eventoHora: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	an Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:18:34.660747-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:18:34.660747-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(942103296)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(195299584)
		submorphs: 	an Array(an ImageMorph(481156608))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (453467648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(481156608)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(942103296)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(195299584)
		submorphs: 	an Array(an ImageMorph(481156608))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (453467648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(481156608)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(942103296)
	Arguments and temporary variables: 
		evt: 	[(2661@219) mouseUp 24714770 nil]
	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(195299584)
		submorphs: 	an Array(an ImageMorph(481156608))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (453467648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(481156608)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(942103296)
	Arguments and temporary variables: 
		anEvent: 	[(2661@219) mouseUp 24714770 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(195299584)
		submorphs: 	an Array(an ImageMorph(481156608))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (453467648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(481156608)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2661@219) mouseUp 24714770 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(942103296)
	Receiver's instance variables: 
		timeStamp: 	24714770
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2661@219)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento(Object)>>doesNotUnderstand: #nombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#generateWithSource was sent to nil
23 September 2018 10:22:35.005044 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #generateWithSource
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	generateWithSource
		exception: 	MessageNotUnderstood: receiver of "generateWithSource" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'inicializarConNombre:  conInvitados:  enAnio:  enMes:  enDia:  yEnHor...etc...
		aController: 	a RubScrolledTextMorph(217505024)
		aClass: 	Evento
		oldClass: 	Object
		class: 	nil
		newClassName: 	'inicializarConNombre:'
		defTokens: 	an OrderedCollection('inicializarConNombre:' 'conInvitados:' 'enAnio...etc...
		keywdIx: 	0
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ' Variable or expression expected ->'
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(1 to: 35)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'inicializarConNombre:  conInvitados:  enAnio:  enMes:  enDia:  yEnHor...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ' Variable or expression expected ->'
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(1 to: 35)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		model: 	a NautilusUI


ClassOrMethodDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassOrMethodDefinitionAcceptor
	Arguments and temporary variables: 
		source: 	'inicializarConNombre:  conInvitados:  enAnio:  enMes:  enDia:  yEnHora...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		model: 	a NautilusUI


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	'inicializarConNombre:  conInvitados:  enAnio:  enMes:  enDia:  yEnHora:...etc...
		aController: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ' Variable or expression expected ->'
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(1 to: 35)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(478841600)
		sourceCodePanel: 	a PanelMorph(593803008)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(693063168)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ' Variable or expression expected ->'
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(217505024)
		sourceCodeSelectionInterval: 	(1 to: 35)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(82451712)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'tp'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(213922304)


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		anObject: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenTextAcceptedInView: -> a NautilusUI)
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NautilusUI
		selector: 	#whenTextAcceptedInView:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a NautilusUI
		action: 	MessageSend(#whenTextAcceptedInView: -> a NautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a NautilusUI
		action: 	MessageSend(#whenTextAcceptedInView: -> a NautilusUI)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		announcement: 	a RubTextAccepted
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubScrolledTextMorph>>acceptContents
	Receiver: a RubScrolledTextMorph(217505024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(42.0@342.0) corner: (1062.0@624.0)
		owner: 	a PanelMorph(593803008)
		submorphs: 	an Array(a RubTextScrollPane(763138048) a RubAdornmentDisplayer(8894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (535336192) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	false
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(763138048)
		rulers: 	a SortedCollection(a NautilusAnnotationDisplayer(278517248) a RubTextSe...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>whenTextAcceptRequest:
	Receiver: a RubScrolledTextMorph(217505024)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		bounds: 	(42.0@342.0) corner: (1062.0@624.0)
		owner: 	a PanelMorph(593803008)
		submorphs: 	an Array(a RubTextScrollPane(763138048) a RubAdornmentDisplayer(8894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (535336192) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	false
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(763138048)
		rulers: 	a SortedCollection(a NautilusAnnotationDisplayer(278517248) a RubTextSe...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(217505024))
	Arguments and temporary variables: 
		anObject: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(217505024)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(217505024))
	Arguments and temporary variables: 
		arg: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(217505024)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(217505024))
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptRequest
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(217505024)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAcceptRequest
		subscriber: 	a RubScrolledTextMorph(217505024)
		action: 	MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(217505024...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAcceptRequest
		subscriber: 	a RubScrolledTextMorph(217505024)
		action: 	MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(217505024...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
		announcement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(RubAbstractTextArea)>>announce:
	Receiver: a RubEditingArea(706214144)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@31)
		owner: 	a TransformWithLayoutMorph(201415680)
		submorphs: 	an Array(a RubPrimarySelectionMorph(476691712) a RubCursor(695374336...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (572274688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(763138048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(695374336)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
	Receiver: a RubScrolledTextModel
	Arguments and temporary variables: 
		view: 	a RubScrolledTextMorph(217505024)
	Receiver's instance variables: 
		hasUnacceptedEdits: 	true
		announcer: 	an Announcer
		text: 	a Text for ' Variable or expression expected ->inicializarConNombre:  con...etc...
		primarySelectionInterval: 	nil
		textSegments: 	nil
		interactionModel: 	a NautilusUI


RubScrolledTextMorph>>whenConfigurationChanged:
	Receiver: a RubScrolledTextMorph(217505024)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubConfigurationChange
	Receiver's instance variables: 
		bounds: 	(42.0@342.0) corner: (1062.0@624.0)
		owner: 	a PanelMorph(593803008)
		submorphs: 	an Array(a RubTextScrollPane(763138048) a RubAdornmentDisplayer(8894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (535336192) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	false
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(763138048)
		rulers: 	a SortedCollection(a NautilusAnnotationDisplayer(278517248) a RubTextSe...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #generateWithSource
OpalCompiler>>evaluate
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
ClassOrMethodDefinitionAcceptor>>acceptInstanceSide:notifying:
ClassOrMethodDefinitionAcceptor>>accept:notifying:
NautilusUI>>compileSource:notifying:
NautilusUI(AbstractNautilusUI)>>whenTextAcceptedInView:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
[ :view | view textArea announce: (RubTextAcceptRequest morph: view textArea) ] in RubScrolledTextModel>>acceptEditsInView
RubScrolledTextMorph>>whenConfigurationChanged:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>whenConfigurationChangedFromModel:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextModel>>announce:
RubScrolledTextModel>>reconfigureViewWith:
RubScrolledTextModel>>acceptEditsInView
NautilusUI(AbstractNautilusUI)>>acceptSourceCodeFromView
NautilusUI(AbstractNautilusUI)>>okToChange
PackageTreeModel>>okToChange
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
23 September 2018 10:33:48.193234 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil
		eventoNombre: 	nil
		eventoInvitados: 	nil
		eventoAnio: 	nil
		eventoMes: 	nil
		eventoDia: 	nil
		eventoHora: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:33:48.147617-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-23T22:33:48.147617-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(562923520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(470017024)
		submorphs: 	an Array(an ImageMorph(106236416))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (958952192) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(106236416)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(562923520)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(470017024)
		submorphs: 	an Array(an ImageMorph(106236416))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (958952192) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(106236416)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(562923520)
	Arguments and temporary variables: 
		evt: 	[(2657@221) mouseUp 25628259 nil]
	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(470017024)
		submorphs: 	an Array(an ImageMorph(106236416))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (958952192) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(106236416)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(562923520)
	Arguments and temporary variables: 
		anEvent: 	[(2657@221) mouseUp 25628259 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		owner: 	a FTCellMorph(470017024)
		submorphs: 	an Array(an ImageMorph(106236416))
		fullBounds: 	(2652.0@211.0) corner: (2668.0@227.0)
		color: 	Color transparent
		extension: 	a MorphExtension (958952192) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(106236416)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2657@221) mouseUp 25628259 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(562923520)
	Receiver's instance variables: 
		timeStamp: 	25628259
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2657@221)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #nombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 7:23:49.655551 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:24:35.752127 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:24:45.420633 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:25:33.189802 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:33.170843-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:33.170843-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:25:45.035284 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:44.999746-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test05SeCreaUnEventoconNombreAsad...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:44.999746-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test05SeCreaUnEventoconNombreAsad...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hor...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:25:47.362011 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAn...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:47.341073-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test05SeCreaUnEventoconNombreAsad...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnA...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:47.341073-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test05SeCreaUnEventoconNombreAsad...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10D...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Di...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hor...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEnAni...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEn...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(762927616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		owner: 	a FTCellMorph(486368000)
		submorphs: 	an Array(an ImageMorph(1047297280))
		fullBounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		color: 	Color transparent
		extension: 	a MorphExtension (79697664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEn...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1047297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(762927616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		owner: 	a FTCellMorph(486368000)
		submorphs: 	an Array(an ImageMorph(1047297280))
		fullBounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		color: 	Color transparent
		extension: 	a MorphExtension (79697664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEn...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1047297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(762927616)
	Arguments and temporary variables: 
		evt: 	[(1413@181) mouseUp 2158712 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		owner: 	a FTCellMorph(486368000)
		submorphs: 	an Array(an ImageMorph(1047297280))
		fullBounds: 	(1403.0@171.0) corner: (1419.0@187.0)
		color: 	Color transparent
		extension: 	a MorphExtension (79697664) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05SeCreaUnEventoconNombreAsadoInvitadosPedroEn...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1047297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(762927616)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #nombre
25 September 2018 7:25:49.6862 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #nombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	nombre
		exception: 	MessageNotUnderstood: Evento class>>nombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#setAnio:->Evento>>#setAnio: #setDia:->Evento>>#...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:49.654795-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:25:49.654795-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(863392000)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(368054272)
		submorphs: 	an Array(an ImageMorph(491068160))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (606939392) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(491068160)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(863392000)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(368054272)
		submorphs: 	an Array(an ImageMorph(491068160))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (606939392) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(491068160)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(863392000)
	Arguments and temporary variables: 
		evt: 	[(1410@160) mouseUp 2161023 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(368054272)
		submorphs: 	an Array(an ImageMorph(491068160))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (606939392) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(491068160)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(863392000)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:33:11.572551 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:33:11.537208-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:33:11.537208-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1001570816)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(420057344)
		submorphs: 	an Array(an ImageMorph(421763072))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (806204416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(421763072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1001570816)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(420057344)
		submorphs: 	an Array(an ImageMorph(421763072))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (806204416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(421763072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1001570816)
	Arguments and temporary variables: 
		evt: 	[(1414@157) mouseUp 2602899 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(420057344)
		submorphs: 	an Array(an ImageMorph(421763072))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (806204416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(421763072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1001570816)
	Arguments and temporary variables: 
		anEvent: 	[(1414@157) mouseUp 2602899 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(420057344)
		submorphs: 	an Array(an ImageMorph(421763072))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (806204416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(421763072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1414@157) mouseUp 2602899 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1001570816)
	Receiver's instance variables: 
		timeStamp: 	2602899
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1414@157)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:34:01.157721 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:34:01.141698-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:34:01.141698-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(149958656)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(849340416)
		submorphs: 	an Array(an ImageMorph(765641472))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (418234624) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(765641472)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(149958656)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(849340416)
		submorphs: 	an Array(an ImageMorph(765641472))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (418234624) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(765641472)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(149958656)
	Arguments and temporary variables: 
		evt: 	[(1413@162) mouseUp 2652506 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(849340416)
		submorphs: 	an Array(an ImageMorph(765641472))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (418234624) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(765641472)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(149958656)
	Arguments and temporary variables: 
		anEvent: 	[(1413@162) mouseUp 2652506 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(849340416)
		submorphs: 	an Array(an ImageMorph(765641472))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (418234624) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(765641472)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@162) mouseUp 2652506 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(149958656)
	Receiver's instance variables: 
		timeStamp: 	2652506
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@162)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:34:30.642063 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:34:30.610185-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:34:30.610185-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(481576704)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(405086208)
		submorphs: 	an Array(an ImageMorph(193868032))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (611353344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(193868032)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(481576704)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(405086208)
		submorphs: 	an Array(an ImageMorph(193868032))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (611353344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(193868032)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(481576704)
	Arguments and temporary variables: 
		evt: 	[(1413@156) mouseUp 2681978 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(405086208)
		submorphs: 	an Array(an ImageMorph(193868032))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (611353344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(193868032)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(481576704)
	Arguments and temporary variables: 
		anEvent: 	[(1413@156) mouseUp 2681978 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(405086208)
		submorphs: 	an Array(an ImageMorph(193868032))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (611353344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(193868032)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@156) mouseUp 2681978 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(481576704)
	Receiver's instance variables: 
		timeStamp: 	2681978
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@156)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:35:13.53039 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:35:13.504668-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:35:13.504668-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(57456640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(104392448)
		submorphs: 	an Array(an ImageMorph(826971648))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400738048) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(826971648)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(57456640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(104392448)
		submorphs: 	an Array(an ImageMorph(826971648))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400738048) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(826971648)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(57456640)
	Arguments and temporary variables: 
		evt: 	[(1405@163) mouseUp 2724871 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(104392448)
		submorphs: 	an Array(an ImageMorph(826971648))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400738048) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(826971648)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(57456640)
	Arguments and temporary variables: 
		anEvent: 	[(1405@163) mouseUp 2724871 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(104392448)
		submorphs: 	an Array(an ImageMorph(826971648))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400738048) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(826971648)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1405@163) mouseUp 2724871 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(57456640)
	Receiver's instance variables: 
		timeStamp: 	2724871
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1405@163)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getInvitados
25 September 2018 7:36:42.856327 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getInvitados
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getInvitados
		exception: 	MessageNotUnderstood: Evento class>>getInvitados
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:36:42.834645-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:36:42.834645-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test04SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(884063232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(111151104)
		submorphs: 	an Array(an ImageMorph(337158400))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488043520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(337158400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(884063232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(111151104)
		submorphs: 	an Array(an ImageMorph(337158400))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488043520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(337158400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(884063232)
	Arguments and temporary variables: 
		evt: 	[(1413@161) mouseUp 2814186 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(111151104)
		submorphs: 	an Array(an ImageMorph(337158400))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488043520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(337158400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(884063232)
	Arguments and temporary variables: 
		anEvent: 	[(1413@161) mouseUp 2814186 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		owner: 	a FTCellMorph(111151104)
		submorphs: 	an Array(an ImageMorph(337158400))
		fullBounds: 	(1403.0@151.0) corner: (1419.0@167.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488043520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test04SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(337158400)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@161) mouseUp 2814186 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(884063232)
	Receiver's instance variables: 
		timeStamp: 	2814186
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@161)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getInvitados
CalendarioTest>>test04SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:39:58.096748 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:39:58.073846-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:39:58.073846-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(88540160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(407450624)
		submorphs: 	an Array(an ImageMorph(1057085184))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (302501120) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1057085184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(88540160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(407450624)
		submorphs: 	an Array(an ImageMorph(1057085184))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (302501120) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1057085184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(88540160)
	Arguments and temporary variables: 
		evt: 	[(1410@139) mouseUp 3009444 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(407450624)
		submorphs: 	an Array(an ImageMorph(1057085184))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (302501120) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1057085184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(88540160)
	Arguments and temporary variables: 
		anEvent: 	[(1410@139) mouseUp 3009444 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(407450624)
		submorphs: 	an Array(an ImageMorph(1057085184))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (302501120) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1057085184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1410@139) mouseUp 3009444 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(88540160)
	Receiver's instance variables: 
		timeStamp: 	3009444
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1410@139)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:40:25.612433 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:40:25.57762-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:40:25.57762-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(328282112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(797105920)
		submorphs: 	an Array(an ImageMorph(353204224))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (662623232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(353204224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(328282112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(797105920)
		submorphs: 	an Array(an ImageMorph(353204224))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (662623232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(353204224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(328282112)
	Arguments and temporary variables: 
		evt: 	[(1404@143) mouseUp 3036942 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(797105920)
		submorphs: 	an Array(an ImageMorph(353204224))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (662623232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(353204224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(328282112)
	Arguments and temporary variables: 
		anEvent: 	[(1404@143) mouseUp 3036942 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(797105920)
		submorphs: 	an Array(an ImageMorph(353204224))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (662623232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(353204224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1404@143) mouseUp 3036942 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(328282112)
	Receiver's instance variables: 
		timeStamp: 	3036942
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1404@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:40:44.857917 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:40:44.844545-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:40:44.844545-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(506930688)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(286180608)
		submorphs: 	an Array(an ImageMorph(416904192))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (745773312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(416904192)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(506930688)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(286180608)
		submorphs: 	an Array(an ImageMorph(416904192))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (745773312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(416904192)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(506930688)
	Arguments and temporary variables: 
		evt: 	[(1417@141) mouseUp 3056197 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(286180608)
		submorphs: 	an Array(an ImageMorph(416904192))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (745773312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(416904192)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(506930688)
	Arguments and temporary variables: 
		anEvent: 	[(1417@141) mouseUp 3056197 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(286180608)
		submorphs: 	an Array(an ImageMorph(416904192))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (745773312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(416904192)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1417@141) mouseUp 3056197 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(506930688)
	Receiver's instance variables: 
		timeStamp: 	3056197
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1417@141)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:41:40.118125 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:41:40.084213-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:41:40.084213-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(213154560)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(652409344)
		submorphs: 	an Array(an ImageMorph(1042217216))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (596794368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1042217216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(213154560)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(652409344)
		submorphs: 	an Array(an ImageMorph(1042217216))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (596794368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1042217216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(213154560)
	Arguments and temporary variables: 
		evt: 	[(1414@143) mouseUp 3111448 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(652409344)
		submorphs: 	an Array(an ImageMorph(1042217216))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (596794368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1042217216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(213154560)
	Arguments and temporary variables: 
		anEvent: 	[(1414@143) mouseUp 3111448 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(652409344)
		submorphs: 	an Array(an ImageMorph(1042217216))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (596794368) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1042217216)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1414@143) mouseUp 3111448 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(213154560)
	Receiver's instance variables: 
		timeStamp: 	3111448
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1414@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarPersonas:
25 September 2018 7:42:03.568755 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarPersonas:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarPersonas: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>agregarPersonas:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:03.538994-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:03.538994-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(764383232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(339921664)
		submorphs: 	an Array(an ImageMorph(124858112))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401184256) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(124858112)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(764383232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(339921664)
		submorphs: 	an Array(an ImageMorph(124858112))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401184256) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(124858112)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(764383232)
	Arguments and temporary variables: 
		evt: 	[(1413@122) mouseUp 3134892 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(339921664)
		submorphs: 	an Array(an ImageMorph(124858112))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401184256) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(124858112)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(764383232)
	Arguments and temporary variables: 
		anEvent: 	[(1413@122) mouseUp 3134892 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(339921664)
		submorphs: 	an Array(an ImageMorph(124858112))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (401184256) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(124858112)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@122) mouseUp 3134892 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(764383232)
	Receiver's instance variables: 
		timeStamp: 	3134892
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@122)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarPersonas:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:42:16.952405 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:16.92246-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:16.92246-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(576006912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(154700288)
		submorphs: 	an Array(an ImageMorph(516046080))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (577787648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(516046080)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(576006912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(154700288)
		submorphs: 	an Array(an ImageMorph(516046080))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (577787648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(516046080)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(576006912)
	Arguments and temporary variables: 
		evt: 	[(1413@141) mouseUp 3148293 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(154700288)
		submorphs: 	an Array(an ImageMorph(516046080))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (577787648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(516046080)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(576006912)
	Arguments and temporary variables: 
		anEvent: 	[(1413@141) mouseUp 3148293 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(154700288)
		submorphs: 	an Array(an ImageMorph(516046080))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (577787648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(516046080)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@141) mouseUp 3148293 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(576006912)
	Receiver's instance variables: 
		timeStamp: 	3148293
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@141)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarPersonas:
25 September 2018 7:42:29.736984 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarPersonas:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarPersonas: 'Juan'
		exception: 	MessageNotUnderstood: Calendario>>agregarPersonas:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()


CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:29.709318-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:29.709318-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test02CalendarioDeberiaExistirJua...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(104667904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(366774784)
		submorphs: 	an Array(an ImageMorph(420283392))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (633284608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420283392)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(104667904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(366774784)
		submorphs: 	an Array(an ImageMorph(420283392))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (633284608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420283392)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(104667904)
	Arguments and temporary variables: 
		evt: 	[(1416@118) mouseUp 3161078 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(366774784)
		submorphs: 	an Array(an ImageMorph(420283392))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (633284608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420283392)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(104667904)
	Arguments and temporary variables: 
		anEvent: 	[(1416@118) mouseUp 3161078 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		owner: 	a FTCellMorph(366774784)
		submorphs: 	an Array(an ImageMorph(420283392))
		fullBounds: 	(1403.0@111.0) corner: (1419.0@127.0)
		color: 	Color transparent
		extension: 	a MorphExtension (633284608) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420283392)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1416@118) mouseUp 3161078 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(104667904)
	Receiver's instance variables: 
		timeStamp: 	3161078
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1416@118)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarPersonas:
CalendarioTest>>test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #getNombre
25 September 2018 7:42:50.230448 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Evento class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		nuevoEvento: 	Evento
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnA...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:50.205102-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEn...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T19:42:50.205102-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test03SeCreaUnEventoconNombreSies...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5D...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Ho...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03SeCreaUnEventoconNombreSiestaInvita...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(170808832)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(561407232)
		submorphs: 	an Array(an ImageMorph(944965632))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (326091776) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(944965632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(170808832)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(561407232)
		submorphs: 	an Array(an ImageMorph(944965632))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (326091776) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(944965632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(170808832)
	Arguments and temporary variables: 
		evt: 	[(1413@137) mouseUp 3181573 nil]
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(561407232)
		submorphs: 	an Array(an ImageMorph(944965632))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (326091776) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(944965632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(170808832)
	Arguments and temporary variables: 
		anEvent: 	[(1413@137) mouseUp 3181573 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		owner: 	a FTCellMorph(561407232)
		submorphs: 	an Array(an ImageMorph(944965632))
		fullBounds: 	(1403.0@131.0) corner: (1419.0@147.0)
		color: 	Color transparent
		extension: 	a MorphExtension (326091776) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test03SeCreaUnEventoconNombreSiestaInvitadosPedroE...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(944965632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1413@137) mouseUp 3181573 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(170808832)
	Receiver's instance variables: 
		timeStamp: 	3181573
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1413@137)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 8:20:13.831954 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest>>test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaI...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T20:20:13.786276-03:00
		failures: 	a Set(CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiesta...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T20:20:13.786276-03:00
		failures: 	a Set(CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreS...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio201...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedro...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAni...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05SeCreaUnEventoconNombreAsadoInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiestaIn...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(974320640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		owner: 	a FTCellMorph(506240256)
		submorphs: 	an Array(an ImageMorph(31269376))
		fullBounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488684032) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(31269376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(974320640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		owner: 	a FTCellMorph(506240256)
		submorphs: 	an Array(an ImageMorph(31269376))
		fullBounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488684032) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(31269376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(974320640)
	Arguments and temporary variables: 
		evt: 	[(2750@158) mouseUp 5425145 nil]
	Receiver's instance variables: 
		bounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		owner: 	a FTCellMorph(506240256)
		submorphs: 	an Array(an ImageMorph(31269376))
		fullBounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488684032) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(31269376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(974320640)
	Arguments and temporary variables: 
		anEvent: 	[(2750@158) mouseUp 5425145 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		owner: 	a FTCellMorph(506240256)
		submorphs: 	an Array(an ImageMorph(31269376))
		fullBounds: 	(2744.0@148.0) corner: (2760.0@164.0)
		color: 	Color transparent
		extension: 	a MorphExtension (488684032) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test05CalendarioDeberiaTenerUnEventoConNombreSiest...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(31269376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2750@158) mouseUp 5425145 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(974320640)
	Receiver's instance variables: 
		timeStamp: 	5425145
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2750@158)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
25 September 2018 8:40:43.733727 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarEventoSemanalConNombre: 'Siesta' semanas: 3 invitados: #('Pedr...etc...
		exception: 	MessageNotUnderstood: Calendario>>agregarEventoSemanalConNombre:sema...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T20:40:43.703474-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T20:40:43.703474-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(620329728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		owner: 	a FTCellMorph(1031228160)
		submorphs: 	an Array(an ImageMorph(769814272))
		fullBounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (755652096) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(769814272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(620329728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		owner: 	a FTCellMorph(1031228160)
		submorphs: 	an Array(an ImageMorph(769814272))
		fullBounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (755652096) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(769814272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(620329728)
	Arguments and temporary variables: 
		evt: 	[(1383@113) mouseUp 6655054 nil]
	Receiver's instance variables: 
		bounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		owner: 	a FTCellMorph(1031228160)
		submorphs: 	an Array(an ImageMorph(769814272))
		fullBounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (755652096) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(769814272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(620329728)
	Arguments and temporary variables: 
		anEvent: 	[(1383@113) mouseUp 6655054 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		owner: 	a FTCellMorph(1031228160)
		submorphs: 	an Array(an ImageMorph(769814272))
		fullBounds: 	(1373.0@100.0) corner: (1389.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (755652096) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(769814272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1383@113) mouseUp 6655054 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(620329728)
	Receiver's instance variables: 
		timeStamp: 	6655054
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1383@113)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 11:28:39.183028 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:28:39.158462-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:28:39.158462-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(258201600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(22510336)
		submorphs: 	an Array(an ImageMorph(823196160))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (295803392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(823196160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(258201600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(22510336)
		submorphs: 	an Array(an ImageMorph(823196160))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (295803392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(823196160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(258201600)
	Arguments and temporary variables: 
		evt: 	[(2579@116) mouseUp 9272514 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(22510336)
		submorphs: 	an Array(an ImageMorph(823196160))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (295803392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(823196160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(258201600)
	Arguments and temporary variables: 
		anEvent: 	[(2579@116) mouseUp 9272514 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(22510336)
		submorphs: 	an Array(an ImageMorph(823196160))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (295803392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(823196160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2579@116) mouseUp 9272514 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(258201600)
	Receiver's instance variables: 
		timeStamp: 	9272514
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2579@116)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 11:31:25.135129 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:31:25.121337-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:31:25.121337-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(831150592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(466754816)
		submorphs: 	an Array(an ImageMorph(174927360))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99832064) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(174927360)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(831150592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(466754816)
		submorphs: 	an Array(an ImageMorph(174927360))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99832064) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(174927360)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(831150592)
	Arguments and temporary variables: 
		evt: 	[(2591@112) mouseUp 9438473 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(466754816)
		submorphs: 	an Array(an ImageMorph(174927360))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99832064) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(174927360)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(831150592)
	Arguments and temporary variables: 
		anEvent: 	[(2591@112) mouseUp 9438473 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(466754816)
		submorphs: 	an Array(an ImageMorph(174927360))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99832064) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(174927360)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2591@112) mouseUp 9438473 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(831150592)
	Receiver's instance variables: 
		timeStamp: 	9438473
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2591@112)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 11:31:49.178422 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:31:49.148204-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:31:49.148204-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(126556160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(484539648)
		submorphs: 	an Array(an ImageMorph(327141632))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (712614656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(327141632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(126556160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(484539648)
		submorphs: 	an Array(an ImageMorph(327141632))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (712614656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(327141632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(126556160)
	Arguments and temporary variables: 
		evt: 	[(2582@113) mouseUp 9462489 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(484539648)
		submorphs: 	an Array(an ImageMorph(327141632))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (712614656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(327141632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(126556160)
	Arguments and temporary variables: 
		anEvent: 	[(2582@113) mouseUp 9462489 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(484539648)
		submorphs: 	an Array(an ImageMorph(327141632))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (712614656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(327141632)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(2582@113) mouseUp 9462489 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(126556160)
	Receiver's instance variables: 
		timeStamp: 	9462489
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2582@113)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:35:49.099299 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:35:49.080631-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:35:49.080631-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(709288704)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(401945600)
		submorphs: 	an Array(an ImageMorph(655297280))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212302848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(655297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(709288704)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(401945600)
		submorphs: 	an Array(an ImageMorph(655297280))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212302848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(655297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(709288704)
	Arguments and temporary variables: 
		evt: 	[(2579@117) mouseUp 9702419 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(401945600)
		submorphs: 	an Array(an ImageMorph(655297280))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212302848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(655297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(709288704)
	Arguments and temporary variables: 
		anEvent: 	[(2579@117) mouseUp 9702419 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(401945600)
		submorphs: 	an Array(an ImageMorph(655297280))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212302848) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(655297280)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:36:43.09443 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:36:43.085117-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:36:43.085117-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(640249600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(27329280)
		submorphs: 	an Array(an ImageMorph(836256768))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (762109952) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(836256768)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(640249600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(27329280)
		submorphs: 	an Array(an ImageMorph(836256768))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (762109952) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(836256768)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(640249600)
	Arguments and temporary variables: 
		evt: 	[(2583@118) mouseUp 9756420 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(27329280)
		submorphs: 	an Array(an ImageMorph(836256768))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (762109952) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(836256768)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(640249600)
	Arguments and temporary variables: 
		anEvent: 	[(2583@118) mouseUp 9756420 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(27329280)
		submorphs: 	an Array(an ImageMorph(836256768))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (762109952) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(836256768)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:37:09.520432 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:37:09.510598-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:37:09.510598-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(571628288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(559228672)
		submorphs: 	an Array(an ImageMorph(495449344))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (150086144) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(495449344)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(571628288)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(559228672)
		submorphs: 	an Array(an ImageMorph(495449344))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (150086144) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(495449344)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(571628288)
	Arguments and temporary variables: 
		evt: 	[(2585@114) mouseUp 9782848 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(559228672)
		submorphs: 	an Array(an ImageMorph(495449344))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (150086144) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(495449344)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(571628288)
	Arguments and temporary variables: 
		anEvent: 	[(2585@114) mouseUp 9782848 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(559228672)
		submorphs: 	an Array(an ImageMorph(495449344))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (150086144) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(495449344)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:38:24.766745 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:38:24.733144-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:38:24.733144-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(861639424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(503113216)
		submorphs: 	an Array(an ImageMorph(815053312))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (877372672) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(815053312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(861639424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(503113216)
		submorphs: 	an Array(an ImageMorph(815053312))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (877372672) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(815053312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(861639424)
	Arguments and temporary variables: 
		evt: 	[(2581@115) mouseUp 9858080 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(503113216)
		submorphs: 	an Array(an ImageMorph(815053312))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (877372672) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(815053312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(861639424)
	Arguments and temporary variables: 
		anEvent: 	[(2581@115) mouseUp 9858080 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(503113216)
		submorphs: 	an Array(an ImageMorph(815053312))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (877372672) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(815053312)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:38:32.45533 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:38:32.435618-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:38:32.435618-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(470753024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(568325120)
		submorphs: 	an Array(an ImageMorph(526083328))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (693659392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(526083328)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(470753024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(568325120)
		submorphs: 	an Array(an ImageMorph(526083328))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (693659392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(526083328)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(470753024)
	Arguments and temporary variables: 
		evt: 	[(2579@118) mouseUp 9865776 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(568325120)
		submorphs: 	an Array(an ImageMorph(526083328))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (693659392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(526083328)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(470753024)
	Arguments and temporary variables: 
		anEvent: 	[(2579@118) mouseUp 9865776 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(568325120)
		submorphs: 	an Array(an ImageMorph(526083328))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (693659392) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(526083328)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:40:11.077879 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:40:11.053269-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:40:11.053269-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(258971904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(940919808)
		submorphs: 	an Array(an ImageMorph(232768256))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (495420416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(232768256)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(258971904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(940919808)
		submorphs: 	an Array(an ImageMorph(232768256))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (495420416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(232768256)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(258971904)
	Arguments and temporary variables: 
		evt: 	[(2591@118) mouseUp 9964405 nil]
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(940919808)
		submorphs: 	an Array(an ImageMorph(232768256))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (495420416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(232768256)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(258971904)
	Arguments and temporary variables: 
		anEvent: 	[(2591@118) mouseUp 9964405 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		owner: 	a FTCellMorph(940919808)
		submorphs: 	an Array(an ImageMorph(232768256))
		fullBounds: 	(2576.0@104.0) corner: (2592.0@120.0)
		color: 	Color transparent
		extension: 	a MorphExtension (495420416) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(232768256)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:42:51.650668 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:42:51.630013-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:42:51.630013-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1071457024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(92509184)
		submorphs: 	an Array(an ImageMorph(63236352))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (884048640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(63236352)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1071457024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(92509184)
		submorphs: 	an Array(an ImageMorph(63236352))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (884048640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(63236352)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1071457024)
	Arguments and temporary variables: 
		evt: 	[(910@107) mouseUp 10124967 nil]
	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(92509184)
		submorphs: 	an Array(an ImageMorph(63236352))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (884048640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(63236352)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1071457024)
	Arguments and temporary variables: 
		anEvent: 	[(910@107) mouseUp 10124967 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(92509184)
		submorphs: 	an Array(an ImageMorph(63236352))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (884048640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(63236352)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Evento class did not understand #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
25 September 2018 11:43:38.658035 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
	Receiver: Evento
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Siesta' conCantidadSemanas: 3 conInvitados: #(...etc...
		exception: 	MessageNotUnderstood: Evento class>>inicializarConNombre:conCantidad...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getAnio->Evento>>#getAnio #getDia->Evento>>#get...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{EventoSemanal}
		name: 	#Evento
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombre: 	'Siesta'
		cuantasSemanas: 	3
		invitados: 	#('Pedro')
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		nuevoEvento: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList()


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:43:38.632047-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:43:38.632047-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test03AgregarEventoSemanal #test08Recurso...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(876783616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(402868992)
		submorphs: 	an Array(an ImageMorph(626732288))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (83615488) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(626732288)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(876783616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(402868992)
		submorphs: 	an Array(an ImageMorph(626732288))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (83615488) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(626732288)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(876783616)
	Arguments and temporary variables: 
		evt: 	[(910@108) mouseUp 10171970 nil]
	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(402868992)
		submorphs: 	an Array(an ImageMorph(626732288))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (83615488) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(626732288)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(876783616)
	Arguments and temporary variables: 
		anEvent: 	[(910@108) mouseUp 10171970 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(904.0@100.0) corner: (920.0@116.0)
		owner: 	a FTCellMorph(402868992)
		submorphs: 	an Array(an ImageMorph(626732288))
		fullBounds: 	(904.0@100.0) corner: (920.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (83615488) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(626732288)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Evento class(Object)>>doesNotUnderstand: #inicializarConNombre:conCantidadSemanas:conInvitados:enAnio:enMes:enDia:yEnHora:
Calendario>>agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
25 September 2018 11:47:03.250581 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:47:03.227974-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-25T23:47:03.227974-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(697515008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(827.0@259.0) corner: (843.0@275.0)
		owner: 	a FTCellMorph(161475840)
		submorphs: 	an Array(an ImageMorph(507868672))
		fullBounds: 	(827.0@259.0) corner: (843.0@275.0)
		color: 	Color transparent
		extension: 	a MorphExtension (576355840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(507868672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(697515008)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(827.0@259.0) corner: (843.0@275.0)
		owner: 	a FTCellMorph(161475840)
		submorphs: 	an Array(an ImageMorph(507868672))
		fullBounds: 	(827.0@259.0) corner: (843.0@275.0)
		color: 	Color transparent
		extension: 	a MorphExtension (576355840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(507868672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(697515008)
	Arguments and temporary variables: 
		evt: 	[(834@273) mouseUp 10376564 nil]
	Receiver's instance variables: 
		bounds: 	(827.0@259.0) corner: (843.0@275.0)
		owner: 	a FTCellMorph(161475840)
		submorphs: 	an Array(an ImageMorph(507868672))
		fullBounds: 	(827.0@259.0) corner: (843.0@275.0)
		color: 	Color transparent
		extension: 	a MorphExtension (576355840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(507868672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(697515008)
	Arguments and temporary variables: 
		anEvent: 	[(834@273) mouseUp 10376564 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(827.0@259.0) corner: (843.0@275.0)
		owner: 	a FTCellMorph(161475840)
		submorphs: 	an Array(an ImageMorph(507868672))
		fullBounds: 	(827.0@259.0) corner: (843.0@275.0)
		color: 	Color transparent
		extension: 	a MorphExtension (576355840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(507868672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(834@273) mouseUp 10376564 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(697515008)
	Receiver's instance variables: 
		timeStamp: 	10376564
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(834@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:29:34.251682 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an EventoSemanal)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	EventoSemanal(Evento)>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	EventoSemanal(Evento)>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:30:36.681432 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:30:36.642578-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:30:36.642578-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:32:20.824882 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:20.804381-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:20.804381-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:32:42.382711 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:42.342308-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:42.342308-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:32:48.189456 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:48.15098-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:32:48.15098-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:33:00.317319 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:33:00.27765-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:33:00.27765-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:38:11.134995 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:38:11.080101-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:38:11.080101-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 7
26 September 2018 11:46:57.607473 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
#(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)

Array(Object)>>at:
	Receiver: #(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
#(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	7
		aContext: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hor...etc...


Context>>namedTempAt:
	Receiver: [ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	...etc...
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
		sender: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Col...etc...
		pc: 	82
		stackp: 	7
		method: 	Calendario>>#estaOcupado:enAnio:mes:dia:hora:
		closureOrNil: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
...etc...
		receiver: 	a Calendario


Calendario>>ExecuteUnOptimizedIn:
	Receiver: a Calendario
	Arguments and temporary variables: 
		arg1: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: un...etc...
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes:...etc...
		sendNode: 	RBMessageNode((evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	me...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 7)
...etc...
		method: 	Calendario>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora)
	ifTrue: [ ocupado := true ] ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
		each: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:46:57.556516-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:46:57.556516-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
Calendario>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora)
	ifTrue: [ ocupado := true ] ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 7
26 September 2018 11:47:56.447082 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
#(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)

Array(Object)>>at:
	Receiver: #(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
#(#ocupado #nombrePersona #unAnio #unMes #unDia #unaHora)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	7
		aContext: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hor...etc...


Context>>namedTempAt:
	Receiver: [ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	...etc...
	Arguments and temporary variables: 
		index: 	7
	Receiver's instance variables: 
		sender: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Col...etc...
		pc: 	82
		stackp: 	7
		method: 	Calendario>>#estaOcupado:enAnio:mes:dia:hora:
		closureOrNil: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
...etc...
		receiver: 	a Calendario


Calendario>>ExecuteUnOptimizedIn:
	Receiver: a Calendario
	Arguments and temporary variables: 
		arg1: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: un...etc...
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


BlockClosure(Object)>>mustBeBooleanInMagic:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 
		context: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes:...etc...
		sendNode: 	RBMessageNode((evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	me...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 7)
...etc...
		method: 	Calendario>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


BlockClosure(Object)>>mustBeBoolean
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio ]
	and: [ self...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	90
		numArgs: 	0


[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora)
	ifTrue: [ ocupado := true ] ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
		each: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:47:56.404517-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:47:56.404517-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
Calendario>>ExecuteUnOptimizedIn:
BlockClosure(Object)>>mustBeBooleanInMagic:
BlockClosure(Object)>>mustBeBoolean
[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora)
	ifTrue: [ ocupado := true ] ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:50:28.750603 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


UndefinedObject(Object)>>mustBeBooleanInMagic:
	Receiver: nil
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>mustBeBoolean
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:50:28.710467-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:50:28.710467-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
UndefinedObject(Object)>>mustBeBooleanInMagic:
UndefinedObject(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 11:52:00.426634 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


UndefinedObject(Object)>>mustBeBooleanInMagic:
	Receiver: nil
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>mustBeBoolean
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
(evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: ...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro' 'Pablo' 'Maria')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test04AgregarEventoSimpleConVariosInvitados
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:52:00.38472-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test04AgregarEventoSimpleConVa...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:52:00.38472-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test04AgregarEventoSimpleConVa...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test04AgregarEventoSimpleConVariosInvitados
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test04AgregarEventoSimpleConVariosInvitados
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
UndefinedObject(Object)>>mustBeBooleanInMagic:
UndefinedObject(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test04AgregarEventoSimpleConVariosInvitados
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
26 September 2018 11:52:56.79683 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:52:56.779158-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:52:56.779158-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(886451456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(161085696)
		submorphs: 	an Array(an ImageMorph(367764224))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558331648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(367764224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(886451456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(161085696)
		submorphs: 	an Array(an ImageMorph(367764224))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558331648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(367764224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(886451456)
	Arguments and temporary variables: 
		evt: 	[(950@131) mouseUp 550210 nil]
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(161085696)
		submorphs: 	an Array(an ImageMorph(367764224))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558331648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(367764224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(886451456)
	Arguments and temporary variables: 
		anEvent: 	[(950@131) mouseUp 550210 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(161085696)
		submorphs: 	an Array(an ImageMorph(367764224))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558331648) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(367764224)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(950@131) mouseUp 550210 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(886451456)
	Receiver's instance variables: 
		timeStamp: 	550210
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(950@131)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
26 September 2018 11:53:14.834477 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:53:14.80476-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T11:53:14.80476-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(937093632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(1068170752)
		submorphs: 	an Array(an ImageMorph(23123456))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1018622208) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(23123456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(937093632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(1068170752)
		submorphs: 	an Array(an ImageMorph(23123456))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1018622208) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(23123456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(937093632)
	Arguments and temporary variables: 
		evt: 	[(948@128) mouseUp 568225 nil]
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(1068170752)
		submorphs: 	an Array(an ImageMorph(23123456))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1018622208) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(23123456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(937093632)
	Arguments and temporary variables: 
		anEvent: 	[(948@128) mouseUp 568225 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(1068170752)
		submorphs: 	an Array(an ImageMorph(23123456))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1018622208) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(23123456)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(948@128) mouseUp 568225 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(937093632)
	Receiver's instance variables: 
		timeStamp: 	568225
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(948@128)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
26 September 2018 12:46:33.381189 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:46:33.363649-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:46:33.363649-03:00
		failures: 	a Set(PruebasCalendario>>#test03AgregarEventoSemanal)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(177875456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(988308224)
		submorphs: 	an Array(an ImageMorph(920370944))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (352697088) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(920370944)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(177875456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(988308224)
		submorphs: 	an Array(an ImageMorph(920370944))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (352697088) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(920370944)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(177875456)
	Arguments and temporary variables: 
		evt: 	[(945@133) mouseUp 3766799 nil]
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(988308224)
		submorphs: 	an Array(an ImageMorph(920370944))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (352697088) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(920370944)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(177875456)
	Arguments and temporary variables: 
		anEvent: 	[(945@133) mouseUp 3766799 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(942.0@119.0) corner: (958.0@135.0)
		owner: 	a FTCellMorph(988308224)
		submorphs: 	an Array(an ImageMorph(920370944))
		fullBounds: 	(942.0@119.0) corner: (958.0@135.0)
		color: 	Color transparent
		extension: 	a MorphExtension (352697088) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test03AgregarEventoSemanal. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(920370944)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(945@133) mouseUp 3766799 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(177875456)
	Receiver's instance variables: 
		timeStamp: 	3766799
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(945@133)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #ifTrue:
26 September 2018 12:56:25.765283 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #ifTrue:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio
			and: [ self...etc...
	Arguments and temporary variables: 
		aMessage: 	ifTrue: [ ocupado := true ]
		exception: 	MessageNotUnderstood: BlockClosure>>ifTrue:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	105
		numArgs: 	0


Evento>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an Evento
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an Evento
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:56:25.751383-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:56:25.751383-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test04AgregarEventoSimpleConVariosInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test02AgregarEventoSimple
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test02AgregarEventoSimple
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(979866368)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(903.0@80.0) corner: (919.0@96.0)
		owner: 	a FTCellMorph(840260096)
		submorphs: 	an Array(an ImageMorph(591266816))
		fullBounds: 	(903.0@80.0) corner: (919.0@96.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1018032896) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test02AgregarEventoSimple. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(591266816)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #ifTrue:
Evento>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #ifTrue:
26 September 2018 12:57:15.349041 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #ifTrue:
	Receiver: [ (self getInvitados includes: nombrePersona)
	and: [ self getAnio = unAnio
			and: [ self...etc...
	Arguments and temporary variables: 
		aMessage: 	ifTrue: [ ocupado := true ]
		exception: 	MessageNotUnderstood: BlockClosure>>ifTrue:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Evento>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	105
		numArgs: 	0


Evento>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an Evento
	Arguments and temporary variables: 
		ocupado: 	false
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an Evento
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:57:15.316121-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T12:57:15.316121-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test04AgregarEventoSimpleConVariosInvitad...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test02AgregarEventoSimple
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test02AgregarEventoSimple
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(33548032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(903.0@80.0) corner: (919.0@96.0)
		owner: 	a FTCellMorph(917626112)
		submorphs: 	an Array(an ImageMorph(141803776))
		fullBounds: 	(903.0@80.0) corner: (919.0@96.0)
		color: 	Color transparent
		extension: 	a MorphExtension (665913600) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test02AgregarEventoSimple. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(141803776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #ifTrue:
Evento>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:01:22.831317 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Evento(Object)>>mustBeBooleanInMagic:
	Receiver: an Evento
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


Evento(Object)>>mustBeBoolean
	Receiver: an Evento
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:01:22.806973-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:01:22.806973-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
Evento(Object)>>mustBeBooleanInMagic:
Evento(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:01:56.466316 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Evento(Object)>>mustBeBooleanInMagic:
	Receiver: an Evento
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


Evento(Object)>>mustBeBoolean
	Receiver: an Evento
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:01:56.425129-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:01:56.425129-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
Evento(Object)>>mustBeBooleanInMagic:
Evento(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:05:00.862538 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Evento(Object)>>mustBeBooleanInMagic:
	Receiver: an Evento
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


Evento(Object)>>mustBeBoolean
	Receiver: an Evento
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:00.826779-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:00.826779-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
Evento(Object)>>mustBeBooleanInMagic:
Evento(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:05:06.176618 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an EventoSemanal)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


EventoSemanal(Object)>>mustBeBooleanInMagic:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


EventoSemanal(Object)>>mustBeBoolean
	Receiver: an EventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:06.138141-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:06.138141-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
EventoSemanal(Object)>>mustBeBooleanInMagic:
EventoSemanal(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:05:06.66106 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an EventoSemanal)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


EventoSemanal(Object)>>mustBeBooleanInMagic:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


EventoSemanal(Object)>>mustBeBoolean
	Receiver: an EventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:06.643855-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:06.643855-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
EventoSemanal(Object)>>mustBeBooleanInMagic:
EventoSemanal(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:05:16.631001 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an EventoSemanal)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


EventoSemanal(Object)>>mustBeBooleanInMagic:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


EventoSemanal(Object)>>mustBeBoolean
	Receiver: an EventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:16.589733-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:16.589733-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
EventoSemanal(Object)>>mustBeBooleanInMagic:
EventoSemanal(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 2
26 September 2018 1:05:21.675091 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

Array(Object)>>at:
	Receiver: #(#aBlock)
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
#(#aBlock)

DebuggerMethodMapOpal>>namedTempAt:in:
	Receiver: a DebuggerMethodMapOpal
	Arguments and temporary variables: 
		index: 	2
		aContext: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(C...etc...
		name: 	nil
	Receiver's instance variables: 
		methodNode: 	anySatisfy: aBlock
	"Evaluate aBlock with the elements of the recei...etc...


Context>>namedTempAt:
	Receiver: [ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisf...etc...
	Arguments and temporary variables: 
		index: 	2
	Receiver's instance variables: 
		sender: 	LinkedList>>do:
		pc: 	45
		stackp: 	2
		method: 	Collection>>#anySatisfy:
		closureOrNil: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		receiver: 	a LinkedList(an Evento)


LinkedList(Collection)>>ExecuteUnOptimizedIn:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		arg1: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Colle...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Evento(Object)>>mustBeBooleanInMagic:
	Receiver: an Evento
	Arguments and temporary variables: 
		context: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Co...etc...
		sendNode: 	RBMessageNode((aBlock value: each)
	ifTrue: [ ^ true ])
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ ((ThisContext namedTempAt: 1) ...etc...
		method: 	Collection>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


Evento(Object)>>mustBeBoolean
	Receiver: an Evento
	Arguments and temporary variables: 

	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	an OrderedCollection('Pedro')
		mes: 	5
		nombre: 	'Siesta'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	an Evento
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList>>do:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an Evento)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an Evento)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an Evento)
		lastLink: 	ValueLink(an Evento)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an Evento)


PruebasCalendario>>test02AgregarEventoSimple
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro')
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:21.634877-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test02AgregarEventoSimple
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:05:21.634877-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test02AgregarEventoSimple)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test02AgregarEventoSimple
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test02AgregarEventoSimple
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
DebuggerMethodMapOpal>>namedTempAt:in:
Context>>namedTempAt:
LinkedList(Collection)>>ExecuteUnOptimizedIn:
Evento(Object)>>mustBeBooleanInMagic:
Evento(Object)>>mustBeBoolean
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test02AgregarEventoSimple
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
26 September 2018 1:14:27.214587 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
26 September 2018 1:34:05.001783 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:34:04.954332-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T13:34:04.954332-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#test0...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(297716480)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(964.0@180.0) corner: (980.0@196.0)
		owner: 	a FTCellMorph(720918272)
		submorphs: 	an Array(an ImageMorph(891359744))
		fullBounds: 	(964.0@180.0) corner: (980.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (240246784) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(891359744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(297716480)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(964.0@180.0) corner: (980.0@196.0)
		owner: 	a FTCellMorph(720918272)
		submorphs: 	an Array(an ImageMorph(891359744))
		fullBounds: 	(964.0@180.0) corner: (980.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (240246784) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(891359744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(297716480)
	Arguments and temporary variables: 
		evt: 	[(964@193) mouseUp 6618379 nil]
	Receiver's instance variables: 
		bounds: 	(964.0@180.0) corner: (980.0@196.0)
		owner: 	a FTCellMorph(720918272)
		submorphs: 	an Array(an ImageMorph(891359744))
		fullBounds: 	(964.0@180.0) corner: (980.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (240246784) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(891359744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(297716480)
	Arguments and temporary variables: 
		anEvent: 	[(964@193) mouseUp 6618379 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(964.0@180.0) corner: (980.0@196.0)
		owner: 	a FTCellMorph(720918272)
		submorphs: 	an Array(an ImageMorph(891359744))
		fullBounds: 	(964.0@180.0) corner: (980.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (240246784) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(891359744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:09:07.116598 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:10:52.561902 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


PruebasCalendario>>test03AgregarEventoSemanal
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:10:52.543822-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test03AgregarEventoSemanal
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:10:52.543822-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test03AgregarEventoSemanal)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test03AgregarEventoSemanal
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test03AgregarEventoSemanal
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
PruebasCalendario>>test03AgregarEventoSemanal
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:12:54.441584 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-11T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:12:54.406456-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:12:54.406456-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:15:44.161962 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-11T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:15:44.146081-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:15:44.146081-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:17:30.899315 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-11T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	11
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:17:30.884062-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:17:30.884062-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:20:52.731588 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:20:52.702032-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:20:52.702032-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:21:33.706603 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	'Pedro'
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:21:33.691475-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:21:33.691475-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:21:34.983168 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	'Pedro'
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:21:34.970799-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:21:34.970799-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:33:22.796235 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:33:22.773871-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:33:22.773871-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 2:35:20.606055 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	143
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:35:20.594729-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T14:35:20.594729-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 3:00:43.098755 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	143
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T15:00:43.052606-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T15:00:43.052606-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
26 September 2018 10:15:38.11405 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	143
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T22:15:38.065999-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-26T22:15:38.065999-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
27 September 2018 11:21:50.879949 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
27 September 2018 11:22:08.52708 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
27 September 2018 11:24:52.362418 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:24:52.340468-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:24:52.340468-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #<
27 September 2018 11:26:17.71084 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #<
	Receiver: [ self getDia ]
	Arguments and temporary variables: 
		aMessage: 	< 1
		exception: 	MessageNotUnderstood: BlockClosure>><
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	143
		numArgs: 	0


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	5
		daysInMonth: 	31
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:26:17.697131-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:26:17.697131-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #<
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
27 September 2018 11:27:08.315709 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:27:08.28605-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:27:08.28605-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #,
27 September 2018 11:29:13.460724 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #,
	Receiver: [ self getMes ]
	Arguments and temporary variables: 
		aMessage: 	, '*'
		exception: 	MessageNotUnderstood: BlockClosure>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	142
		numArgs: 	0


Month class>>indexOfMonth:
	Receiver: Month
	Arguments and temporary variables: 
		aMonthName: 	[ self getMes ]
		i: 	1
	Receiver's instance variables: 
		superclass: 	Timespan
		methodDict: 	a MethodDictionary(#asMonth->Month>>#asMonth #daysInMonth->Month>>#...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Month
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	nil
		daysInMonth: 	nil
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	[ self getMes ]
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:29:13.432215-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:29:13.432215-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #,
Month class>>indexOfMonth:
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #<
27 September 2018 11:58:33.526791 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #<
	Receiver: [ self getDia ]
	Arguments and temporary variables: 
		aMessage: 	< 1
		exception: 	MessageNotUnderstood: BlockClosure>><
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
		startpc: 	143
		numArgs: 	0


DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		nanoCount: 	0
		utcOffset: 	-0:03:00:00
		monthIndex: 	5
		daysInMonth: 	31
		p: 	nil
		q: 	nil
		r: 	nil
		s: 	nil
		julianDayNumber: 	nil
		localSeconds: 	nil
		utcSeconds: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:offset:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
		offset: 	-0:03:00:00
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:second:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
		second: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


DateAndTime class>>year:month:day:hour:minute:
	Receiver: DateAndTime
	Arguments and temporary variables: 
		year: 	[ self getAnio ]
		month: 	5
		day: 	[ self getDia ]
		hour: 	[ self getHora ]
		minute: 	0
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->DateAndTime>>#+ #-->DateAndTime>>#- #<->Date...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DateAndTime
		classPool: 	a Dictionary(#ClockProvider->Time #LocalTimeZone->a LocalTimeZone(LT...etc...
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: an EventoSemanal
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		fechaAAnalizar: 	2019-05-04T10:00:00-03:00
		fechaInicioEvento: 	nil
		fechaFinalEvento: 	nil
	Receiver's instance variables: 
		anio: 	2019
		dia: 	4
		hora: 	10
		invitados: 	#('Pedro')
		mes: 	5
		nombre: 	'Siesta'
		semanas: 	3


[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
		evento: 	an EventoSemanal
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
		each: 	an EventoSemanal
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList>>do:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		aLink: 	ValueLink(an EventoSemanal)
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


LinkedList(Collection)>>anySatisfy:
	Receiver: a LinkedList(an EventoSemanal)
	Arguments and temporary variables: 
		aBlock: 	[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: u...etc...
	Receiver's instance variables: 
		firstLink: 	ValueLink(an EventoSemanal)
		lastLink: 	ValueLink(an EventoSemanal)


Calendario>>estaOcupado:enAnio:mes:dia:hora:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombrePersona: 	'Pedro'
		unAnio: 	2019
		unMes: 	5
		unDia: 	4
		unaHora: 	10
		ocupado: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList('Pedro')
		eventos: 	a LinkedList(an EventoSemanal)


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:58:33.513341-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T11:58:33.513341-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test07CalendarioDeberiaTenerUnEve...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #<
DateAndTime class>>year:month:day:hour:minute:second:nanoSecond:offset:
DateAndTime class>>year:month:day:hour:minute:second:offset:
DateAndTime class>>year:month:day:hour:minute:second:
DateAndTime class>>year:month:day:hour:minute:
EventoSemanal>>estaOcupado:enAnio:mes:dia:hora:
[ :evento | 
evento
	estaOcupado: nombrePersona
	enAnio: unAnio
	mes: unMes
	dia: unDia
	hora: unaHora ] in Calendario>>estaOcupado:enAnio:mes:dia:hora:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in LinkedList(Collection)>>anySatisfy:
LinkedList>>do:
LinkedList(Collection)>>anySatisfy:
Calendario>>estaOcupado:enAnio:mes:dia:hora:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 12:05:42.297067 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:05:42.277194-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:05:42.277194-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test07CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(400967936)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(250761728)
		submorphs: 	an Array(an ImageMorph(976621824))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (867625472) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(976621824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(400967936)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(250761728)
		submorphs: 	an Array(an ImageMorph(976621824))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (867625472) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(976621824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(400967936)
	Arguments and temporary variables: 
		evt: 	[(888@193) mouseUp 4585716 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(250761728)
		submorphs: 	an Array(an ImageMorph(976621824))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (867625472) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(976621824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(400967936)
	Arguments and temporary variables: 
		anEvent: 	[(888@193) mouseUp 4585716 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(250761728)
		submorphs: 	an Array(an ImageMorph(976621824))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (867625472) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(976621824)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(888@193) mouseUp 4585716 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(400967936)
	Receiver's instance variables: 
		timeStamp: 	4585716
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(888@193)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 12:06:17.724348 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:06:17.694406-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:06:17.694406-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test07CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(463274496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(514953472)
		submorphs: 	an Array(an ImageMorph(841885952))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883331584) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841885952)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(463274496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(514953472)
		submorphs: 	an Array(an ImageMorph(841885952))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883331584) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841885952)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(463274496)
	Arguments and temporary variables: 
		evt: 	[(887@189) mouseUp 4621137 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(514953472)
		submorphs: 	an Array(an ImageMorph(841885952))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883331584) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841885952)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(463274496)
	Arguments and temporary variables: 
		anEvent: 	[(887@189) mouseUp 4621137 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(514953472)
		submorphs: 	an Array(an ImageMorph(841885952))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883331584) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841885952)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(887@189) mouseUp 4621137 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(463274496)
	Receiver's instance variables: 
		timeStamp: 	4621137
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(887@189)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 12:08:40.105961 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:08:40.082626-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:08:40.082626-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test07CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(670050560)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(43237632)
		submorphs: 	an Array(an ImageMorph(98769408))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (14731520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98769408)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(670050560)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(43237632)
		submorphs: 	an Array(an ImageMorph(98769408))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (14731520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98769408)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(670050560)
	Arguments and temporary variables: 
		evt: 	[(880@188) mouseUp 4763523 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(43237632)
		submorphs: 	an Array(an ImageMorph(98769408))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (14731520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98769408)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(670050560)
	Arguments and temporary variables: 
		anEvent: 	[(880@188) mouseUp 4763523 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(43237632)
		submorphs: 	an Array(an ImageMorph(98769408))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (14731520) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98769408)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(880@188) mouseUp 4763523 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(670050560)
	Receiver's instance variables: 
		timeStamp: 	4763523
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(880@188)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 12:10:33.822029 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:10:33.800182-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T12:10:33.800182-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test07CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(425159168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(761598464)
		submorphs: 	an Array(an ImageMorph(477667840))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (871661824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(477667840)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(425159168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(761598464)
		submorphs: 	an Array(an ImageMorph(477667840))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (871661824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(477667840)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(425159168)
	Arguments and temporary variables: 
		evt: 	[(885@192) mouseUp 4877234 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(761598464)
		submorphs: 	an Array(an ImageMorph(477667840))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (871661824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(477667840)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(425159168)
	Arguments and temporary variables: 
		anEvent: 	[(885@192) mouseUp 4877234 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(761598464)
		submorphs: 	an Array(an ImageMorph(477667840))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (871661824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(477667840)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 1:36:51.617973 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>deny:
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombre...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:36:51.594955-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombr...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:36:51.594955-03:00
		failures: 	a Set(CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalCon...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Invitad...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemana...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1Inv...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test07CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNombreS...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(677065216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(111667456)
		submorphs: 	an Array(an ImageMorph(564525568))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400615680) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(564525568)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(677065216)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(111667456)
		submorphs: 	an Array(an ImageMorph(564525568))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400615680) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(564525568)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(677065216)
	Arguments and temporary variables: 
		evt: 	[(882@183) mouseUp 10055036 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(111667456)
		submorphs: 	an Array(an ImageMorph(564525568))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400615680) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(564525568)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(677065216)
	Arguments and temporary variables: 
		anEvent: 	[(882@183) mouseUp 10055036 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@180.0) corner: (891.0@196.0)
		owner: 	a FTCellMorph(111667456)
		submorphs: 	an Array(an ImageMorph(564525568))
		fullBounds: 	(875.0@180.0) corner: (891.0@196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (400615680) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test07CalendarioDeberiaTenerUnEventoSemanalConNomb...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(564525568)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest(TestAsserter)>>deny:
CalendarioTest>>test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existeRecurso:
27 September 2018 1:38:46.808076 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existeRecurso: 'Proyector'
		exception: 	MessageNotUnderstood: Calendario>>existeRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()


PruebasCalendario>>test05AgregarRecursos
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:38:46.78648-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test05AgregarRecursos)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:38:46.78648-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test05AgregarRecursos)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test05AgregarRecursos
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test05AgregarRecursos #test08RecursoNoAdm...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test05AgregarRecursos
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test05AgregarRecursos
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(939706624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(830269952)
		submorphs: 	an Array(an ImageMorph(431653376))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (600678656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(431653376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(939706624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(830269952)
		submorphs: 	an Array(an ImageMorph(431653376))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (600678656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(431653376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(939706624)
	Arguments and temporary variables: 
		evt: 	[(890@153) mouseUp 10170227 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(830269952)
		submorphs: 	an Array(an ImageMorph(431653376))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (600678656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(431653376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(939706624)
	Arguments and temporary variables: 
		anEvent: 	[(890@153) mouseUp 10170227 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(830269952)
		submorphs: 	an Array(an ImageMorph(431653376))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (600678656) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(431653376)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(890@153) mouseUp 10170227 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(939706624)
	Receiver's instance variables: 
		timeStamp: 	10170227
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(890@153)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existeRecurso:
PruebasCalendario>>test05AgregarRecursos
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existeRecurso:
27 September 2018 1:45:34.173206 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existeRecurso: 'Proyector'
		exception: 	MessageNotUnderstood: Calendario>>existeRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()


PruebasCalendario>>test05AgregarRecursos
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test05AgregarRecursos
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:45:34.145057-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test05AgregarRecursos)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test05AgregarRecursos
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T13:45:34.145057-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PruebasCalendario>>#test05AgregarRecursos)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test05AgregarRecursos
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test05AgregarRecursos
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test05AgregarRecursos
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09RemoverEvento #test08RecursoNoAdmit...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test05AgregarRecursos
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test05AgregarRecursos
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(561641984)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(1031916032)
		submorphs: 	an Array(an ImageMorph(810678528))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (366166528) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(810678528)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(561641984)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(1031916032)
		submorphs: 	an Array(an ImageMorph(810678528))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (366166528) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(810678528)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(561641984)
	Arguments and temporary variables: 
		evt: 	[(887@155) mouseUp 10577585 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(1031916032)
		submorphs: 	an Array(an ImageMorph(810678528))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (366166528) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(810678528)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(561641984)
	Arguments and temporary variables: 
		anEvent: 	[(887@155) mouseUp 10577585 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@140.0) corner: (891.0@156.0)
		owner: 	a FTCellMorph(1031916032)
		submorphs: 	an Array(an ImageMorph(810678528))
		fullBounds: 	(875.0@140.0) corner: (891.0@156.0)
		color: 	Color transparent
		extension: 	a MorphExtension (366166528) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test05AgregarRecursos. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(810678528)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(887@155) mouseUp 10577585 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(561641984)
	Receiver's instance variables: 
		timeStamp: 	10577585
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(887@155)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existeRecurso:
PruebasCalendario>>test05AgregarRecursos
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#includes: was sent to nil
27 September 2018 5:36:20.824732 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #includes:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	includes: 'Proyector'
		exception: 	MessageNotUnderstood: receiver of "includes:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Calendario>>existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombreRecurso: 	'Proyector'
		recursoPertenece: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	nil


CalendarioTest>>test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:36:20.776728-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test09CalendarioNoDeberiaExistirR...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:36:20.776728-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test09CalendarioNoDeberiaExistirR...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09CalendarioNoDeberiaExistirRecursoPr...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCre...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(271515904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@200.0) corner: (891.0@216.0)
		owner: 	a FTCellMorph(777001216)
		submorphs: 	an Array(an ImageMorph(215794176))
		fullBounds: 	(875.0@200.0) corner: (891.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (828727552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(215794176)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(271515904)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@200.0) corner: (891.0@216.0)
		owner: 	a FTCellMorph(777001216)
		submorphs: 	an Array(an ImageMorph(215794176))
		fullBounds: 	(875.0@200.0) corner: (891.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (828727552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(215794176)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(271515904)
	Arguments and temporary variables: 
		evt: 	[(880@202) mouseUp 24424224 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@200.0) corner: (891.0@216.0)
		owner: 	a FTCellMorph(777001216)
		submorphs: 	an Array(an ImageMorph(215794176))
		fullBounds: 	(875.0@200.0) corner: (891.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (828727552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(215794176)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(271515904)
	Arguments and temporary variables: 
		anEvent: 	[(880@202) mouseUp 24424224 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@200.0) corner: (891.0@216.0)
		owner: 	a FTCellMorph(777001216)
		submorphs: 	an Array(an ImageMorph(215794176))
		fullBounds: 	(875.0@200.0) corner: (891.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (828727552) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(215794176)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includes:
Calendario>>existeRecurso:
CalendarioTest>>test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 5:37:01.664597 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:37:01.649319-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:37:01.649319-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(993839616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(132149760)
		submorphs: 	an Array(an ImageMorph(402915584))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (788429312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(402915584)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(993839616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(132149760)
		submorphs: 	an Array(an ImageMorph(402915584))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (788429312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(402915584)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(993839616)
	Arguments and temporary variables: 
		evt: 	[(886@227) mouseUp 24465097 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(132149760)
		submorphs: 	an Array(an ImageMorph(402915584))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (788429312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(402915584)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(993839616)
	Arguments and temporary variables: 
		anEvent: 	[(886@227) mouseUp 24465097 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(132149760)
		submorphs: 	an Array(an ImageMorph(402915584))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (788429312) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(402915584)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(886@227) mouseUp 24465097 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(993839616)
	Receiver's instance variables: 
		timeStamp: 	24465097
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(886@227)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#inicializarConNombre: was sent to nil
27 September 2018 5:40:16.737087 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #inicializarConNombre:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Proyector'
		exception: 	MessageNotUnderstood: receiver of "inicializarConNombre:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	nil
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:40:16.723874-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:40:16.723874-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test11SeCreaUnRecursoProyectorDeberiaDevo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(999303424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(522246400)
		submorphs: 	an Array(an ImageMorph(435052800))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (826481152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(435052800)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(999303424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(522246400)
		submorphs: 	an Array(an ImageMorph(435052800))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (826481152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(435052800)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(999303424)
	Arguments and temporary variables: 
		evt: 	[(881@254) mouseUp 24660175 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(522246400)
		submorphs: 	an Array(an ImageMorph(435052800))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (826481152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(435052800)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(999303424)
	Arguments and temporary variables: 
		anEvent: 	[(881@254) mouseUp 24660175 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(522246400)
		submorphs: 	an Array(an ImageMorph(435052800))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (826481152) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(435052800)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(881@254) mouseUp 24660175 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(999303424)
	Receiver's instance variables: 
		timeStamp: 	24660175
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(881@254)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #inicializarConNombre:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Recurso class did not understand #inicializarConNombre:
27 September 2018 5:40:59.776934 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Recurso class(Object)>>doesNotUnderstand: #inicializarConNombre:
	Receiver: Recurso
	Arguments and temporary variables: 
		aMessage: 	inicializarConNombre: 'Proyector'
		exception: 	MessageNotUnderstood: Recurso class>>inicializarConNombre:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Recurso
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	nil
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:40:59.742517-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:40:59.742517-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test11SeCreaUnRecursoProyectorDeberiaDevo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(34228736)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(14508288)
		submorphs: 	an Array(an ImageMorph(505719296))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (959822080) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(505719296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(34228736)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(14508288)
		submorphs: 	an Array(an ImageMorph(505719296))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (959822080) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(505719296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(34228736)
	Arguments and temporary variables: 
		evt: 	[(882@243) mouseUp 24703192 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(14508288)
		submorphs: 	an Array(an ImageMorph(505719296))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (959822080) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(505719296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(34228736)
	Arguments and temporary variables: 
		anEvent: 	[(882@243) mouseUp 24703192 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(14508288)
		submorphs: 	an Array(an ImageMorph(505719296))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (959822080) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(505719296)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(882@243) mouseUp 24703192 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(34228736)
	Receiver's instance variables: 
		timeStamp: 	24703192
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(882@243)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Recurso class(Object)>>doesNotUnderstand: #inicializarConNombre:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Recurso did not understand #setNombre:
27 September 2018 5:43:25.337378 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Recurso(Object)>>doesNotUnderstand: #setNombre:
	Receiver: a Recurso
	Arguments and temporary variables: 
		aMessage: 	setNombre: 'Proyector'
		exception: 	MessageNotUnderstood: Recurso>>setNombre:
		resumeValue: 	nil
	Receiver's instance variables: 
a Recurso

Recurso class>>inicializarConNombre:
	Receiver: Recurso
	Arguments and temporary variables: 
		nombreRecurso: 	'Proyector'
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Recurso
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	nil
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:43:25.310503-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:43:25.310503-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test11SeCreaUnRecursoProyectorDeberiaDevo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(562874880)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(201756928)
		submorphs: 	an Array(an ImageMorph(462475776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (15454464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(462475776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(562874880)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(201756928)
		submorphs: 	an Array(an ImageMorph(462475776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (15454464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(462475776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(562874880)
	Arguments and temporary variables: 
		evt: 	[(884@250) mouseUp 24848742 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(201756928)
		submorphs: 	an Array(an ImageMorph(462475776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (15454464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(462475776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(562874880)
	Arguments and temporary variables: 
		anEvent: 	[(884@250) mouseUp 24848742 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(201756928)
		submorphs: 	an Array(an ImageMorph(462475776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (15454464) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(462475776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Recurso(Object)>>doesNotUnderstand: #setNombre:
Recurso class>>inicializarConNombre:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Recurso did not understand #setNombre:
27 September 2018 5:44:03.980831 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Recurso(Object)>>doesNotUnderstand: #setNombre:
	Receiver: a Recurso
	Arguments and temporary variables: 
		aMessage: 	setNombre: 'Proyector'
		exception: 	MessageNotUnderstood: Recurso>>setNombre:
		resumeValue: 	nil
	Receiver's instance variables: 
a Recurso

Recurso class>>inicializarConNombre:
	Receiver: Recurso
	Arguments and temporary variables: 
		nombreRecurso: 	'Proyector'
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Recurso
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	nil
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:44:03.966006-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:44:03.966006-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test11SeCreaUnRecursoProyectorDeberiaDevo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(251204096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(949041664)
		submorphs: 	an Array(an ImageMorph(433035776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212355328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(433035776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(251204096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(949041664)
		submorphs: 	an Array(an ImageMorph(433035776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212355328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(433035776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(251204096)
	Arguments and temporary variables: 
		evt: 	[(886@252) mouseUp 24887414 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(949041664)
		submorphs: 	an Array(an ImageMorph(433035776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212355328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(433035776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(251204096)
	Arguments and temporary variables: 
		anEvent: 	[(886@252) mouseUp 24887414 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(949041664)
		submorphs: 	an Array(an ImageMorph(433035776))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (212355328) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(433035776)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
Recurso(Object)>>doesNotUnderstand: #setNombre:
Recurso class>>inicializarConNombre:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Recurso class did not understand #getNombre
27 September 2018 5:45:56.104516 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Recurso class(Object)>>doesNotUnderstand: #getNombre
	Receiver: Recurso
	Arguments and temporary variables: 
		aMessage: 	getNombre
		exception: 	MessageNotUnderstood: Recurso class>>getNombre
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#getNombre->Recurso>>#getNombre )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Recurso
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TP1
		traitComposition: 	{}
		localSelectors: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	Recurso
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:45:56.072341-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:45:56.072341-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeb...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test11SeCreaUnRecursoProyectorDeberiaDevo...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(243654912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(1028978944)
		submorphs: 	an Array(an ImageMorph(260637184))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (738402560) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(260637184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(243654912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(1028978944)
		submorphs: 	an Array(an ImageMorph(260637184))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (738402560) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(260637184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(243654912)
	Arguments and temporary variables: 
		evt: 	[(886@250) mouseUp 24999511 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(1028978944)
		submorphs: 	an Array(an ImageMorph(260637184))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (738402560) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(260637184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(243654912)
	Arguments and temporary variables: 
		anEvent: 	[(886@250) mouseUp 24999511 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(1028978944)
		submorphs: 	an Array(an ImageMorph(260637184))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (738402560) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(260637184)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(886@250) mouseUp 24999511 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(243654912)
	Receiver's instance variables: 
		timeStamp: 	24999511
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(886@250)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Recurso class(Object)>>doesNotUnderstand: #getNombre
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got 'Proyector' instead of 'Parrilla'.
27 September 2018 5:47:39.700829 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:description:
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got ''Proyector'' instead of ''Parrilla''.'
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>assert:equals:
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		actual: 	'Proyector'
		expected: 	'Parrilla'
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest>>test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:47:39.675466-03:00
		failures: 	a Set(CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTr...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:47:39.675466-03:00
		failures: 	a Set(CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTr...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test12SeCreaUnRecursoP...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(877951232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(41783808)
		submorphs: 	an Array(an ImageMorph(733078016))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730677504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(733078016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(877951232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(41783808)
		submorphs: 	an Array(an ImageMorph(733078016))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730677504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(733078016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(877951232)
	Arguments and temporary variables: 
		evt: 	[(885@271) mouseUp 25103109 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(41783808)
		submorphs: 	an Array(an ImageMorph(733078016))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730677504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(733078016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(877951232)
	Arguments and temporary variables: 
		anEvent: 	[(885@271) mouseUp 25103109 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(41783808)
		submorphs: 	an Array(an ImageMorph(733078016))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730677504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(733078016)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:description:
CalendarioTest(TestAsserter)>>assert:equals:
CalendarioTest>>test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got nil instead of 'Proyector'.
27 September 2018 5:49:40.346022 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:description:
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got nil instead of ''Proyector''.'
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>assert:equals:
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		actual: 	nil
		expected: 	'Proyector'
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:49:40.333749-03:00
		failures: 	a Set(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverT...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:49:40.333749-03:00
		failures: 	a Set(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverT...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test12SeCreaUnRecursoP...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(621728256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(81041664)
		submorphs: 	an Array(an ImageMorph(926294272))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (47274496) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(926294272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(621728256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(81041664)
		submorphs: 	an Array(an ImageMorph(926294272))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (47274496) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(926294272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(621728256)
	Arguments and temporary variables: 
		evt: 	[(882@248) mouseUp 25223772 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(81041664)
		submorphs: 	an Array(an ImageMorph(926294272))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (47274496) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(926294272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(621728256)
	Arguments and temporary variables: 
		anEvent: 	[(882@248) mouseUp 25223772 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(81041664)
		submorphs: 	an Array(an ImageMorph(926294272))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (47274496) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(926294272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:description:
CalendarioTest(TestAsserter)>>assert:equals:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got nil instead of 'Parrilla'.
27 September 2018 5:49:44.791116 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:description:
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got nil instead of ''Parrilla''.'
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>assert:equals:
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		actual: 	nil
		expected: 	'Parrilla'
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest>>test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:49:44.762521-03:00
		failures: 	a Set(CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTr...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:49:44.762521-03:00
		failures: 	a Set(CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTr...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test12SeCreaUnRecursoP...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(92772864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(162547968)
		submorphs: 	an Array(an ImageMorph(310935808))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1072560640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(310935808)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(92772864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(162547968)
		submorphs: 	an Array(an ImageMorph(310935808))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1072560640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(310935808)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(92772864)
	Arguments and temporary variables: 
		evt: 	[(887@268) mouseUp 25228197 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(162547968)
		submorphs: 	an Array(an ImageMorph(310935808))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1072560640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(310935808)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(92772864)
	Arguments and temporary variables: 
		anEvent: 	[(887@268) mouseUp 25228197 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@260.0) corner: (891.0@276.0)
		owner: 	a FTCellMorph(162547968)
		submorphs: 	an Array(an ImageMorph(310935808))
		fullBounds: 	(875.0@260.0) corner: (891.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1072560640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test12SeCreaUnRecursoParrillaDeberiaDevolverTrue. ...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(310935808)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:description:
CalendarioTest(TestAsserter)>>assert:equals:
CalendarioTest>>test12SeCreaUnRecursoParrillaDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 5:50:19.258423 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:50:19.229708-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:50:19.229708-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(404082944)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(7154176)
		submorphs: 	an Array(an ImageMorph(74215680))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730827264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(74215680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(404082944)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(7154176)
		submorphs: 	an Array(an ImageMorph(74215680))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730827264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(74215680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(404082944)
	Arguments and temporary variables: 
		evt: 	[(881@230) mouseUp 25262677 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(7154176)
		submorphs: 	an Array(an ImageMorph(74215680))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730827264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(74215680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(404082944)
	Arguments and temporary variables: 
		anEvent: 	[(881@230) mouseUp 25262677 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@220.0) corner: (891.0@236.0)
		owner: 	a FTCellMorph(7154176)
		submorphs: 	an Array(an ImageMorph(74215680))
		fullBounds: 	(875.0@220.0) corner: (891.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (730827264) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(74215680)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(881@230) mouseUp 25262677 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(404082944)
	Receiver's instance variables: 
		timeStamp: 	25262677
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(881@230)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got nil instead of 'Proyector'.
27 September 2018 5:50:20.807664 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:description:
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got nil instead of ''Proyector''.'
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestAsserter)>>assert:equals:
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		actual: 	nil
		expected: 	'Proyector'
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:50:20.795431-03:00
		failures: 	a Set(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverT...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:50:20.795431-03:00
		failures: 	a Set(CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverT...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(30089728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(787200256)
		submorphs: 	an Array(an ImageMorph(903840256))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (619749632) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(903840256)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(30089728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(787200256)
		submorphs: 	an Array(an ImageMorph(903840256))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (619749632) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(903840256)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(30089728)
	Arguments and temporary variables: 
		evt: 	[(883@246) mouseUp 25264228 nil]
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(787200256)
		submorphs: 	an Array(an ImageMorph(903840256))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (619749632) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(903840256)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(30089728)
	Arguments and temporary variables: 
		anEvent: 	[(883@246) mouseUp 25264228 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(875.0@240.0) corner: (891.0@256.0)
		owner: 	a FTCellMorph(787200256)
		submorphs: 	an Array(an ImageMorph(903840256))
		fullBounds: 	(875.0@240.0) corner: (891.0@256.0)
		color: 	Color transparent
		extension: 	a MorphExtension (619749632) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test11SeCreaUnRecursoProyectorDeberiaDevolverTrue....etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(903840256)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:description:
CalendarioTest(TestAsserter)>>assert:equals:
CalendarioTest>>test11SeCreaUnRecursoProyectorDeberiaDevolverTrue
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 5:52:03.722744 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:52:03.700258-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:52:03.700258-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(131639552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@232.0) corner: (999.0@248.0)
		owner: 	a FTCellMorph(159344896)
		submorphs: 	an Array(an ImageMorph(839336448))
		fullBounds: 	(983.0@232.0) corner: (999.0@248.0)
		color: 	Color transparent
		extension: 	a MorphExtension (983490816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(839336448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(131639552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@232.0) corner: (999.0@248.0)
		owner: 	a FTCellMorph(159344896)
		submorphs: 	an Array(an ImageMorph(839336448))
		fullBounds: 	(983.0@232.0) corner: (999.0@248.0)
		color: 	Color transparent
		extension: 	a MorphExtension (983490816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(839336448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(131639552)
	Arguments and temporary variables: 
		evt: 	[(992@242) mouseUp 25367140 nil]
	Receiver's instance variables: 
		bounds: 	(983.0@232.0) corner: (999.0@248.0)
		owner: 	a FTCellMorph(159344896)
		submorphs: 	an Array(an ImageMorph(839336448))
		fullBounds: 	(983.0@232.0) corner: (999.0@248.0)
		color: 	Color transparent
		extension: 	a MorphExtension (983490816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(839336448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(131639552)
	Arguments and temporary variables: 
		anEvent: 	[(992@242) mouseUp 25367140 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(983.0@232.0) corner: (999.0@248.0)
		owner: 	a FTCellMorph(159344896)
		submorphs: 	an Array(an ImageMorph(839336448))
		fullBounds: 	(983.0@232.0) corner: (999.0@248.0)
		color: 	Color transparent
		extension: 	a MorphExtension (983490816) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(839336448)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(992@242) mouseUp 25367140 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(131639552)
	Receiver's instance variables: 
		timeStamp: 	25367140
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(992@242)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarRecurso:
27 September 2018 5:56:47.144073 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarRecurso: a Recurso
		exception: 	MessageNotUnderstood: Calendario>>agregarRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList()


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:56:47.125405-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:56:47.125405-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test13SeCreaUnRecursoProyectorYSeLoAgrega...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 
		evt: 	[(989@302) mouseUp 25650579 nil]
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 
		anEvent: 	[(989@302) mouseUp 25650579 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(989@302) mouseUp 25650579 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(633815552)
	Receiver's instance variables: 
		timeStamp: 	25650579
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@302)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarRecurso:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #agregarRecurso:
27 September 2018 5:56:48.861871 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #agregarRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	agregarRecurso: a Recurso
		exception: 	MessageNotUnderstood: Calendario>>agregarRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList()


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:56:48.85426-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:56:48.85426-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test13SeCreaUnRecursoProyectorYSeLoAgrega...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 
		evt: 	[(989@302) mouseUp 25652306 nil]
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(633815552)
	Arguments and temporary variables: 
		anEvent: 	[(989@302) mouseUp 25652306 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(1021239552)
		submorphs: 	an Array(an ImageMorph(806453504))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (223148544) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(806453504)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(989@302) mouseUp 25652306 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(633815552)
	Receiver's instance variables: 
		timeStamp: 	25652306
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@302)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #agregarRecurso:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
27 September 2018 5:58:24.666157 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:58:24.634804-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-27T17:58:24.634804-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(407437568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(873076992)
		submorphs: 	an Array(an ImageMorph(783696128))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1065761280) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(783696128)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(407437568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(873076992)
		submorphs: 	an Array(an ImageMorph(783696128))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1065761280) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(783696128)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(407437568)
	Arguments and temporary variables: 
		evt: 	[(989@299) mouseUp 25748075 nil]
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(873076992)
		submorphs: 	an Array(an ImageMorph(783696128))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1065761280) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(783696128)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(407437568)
	Arguments and temporary variables: 
		anEvent: 	[(989@299) mouseUp 25748075 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(983.0@292.0) corner: (999.0@308.0)
		owner: 	a FTCellMorph(873076992)
		submorphs: 	an Array(an ImageMorph(783696128))
		fullBounds: 	(983.0@292.0) corner: (999.0@308.0)
		color: 	Color transparent
		extension: 	a MorphExtension (1065761280) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(783696128)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(989@299) mouseUp 25748075 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(407437568)
	Receiver's instance variables: 
		timeStamp: 	25748075
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@299)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 1:51:24.686175 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T13:51:24.668508-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T13:51:24.668508-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 1:59:25.779697 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T13:59:25.748716-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T13:59:25.748716-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(485812224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(121145344)
		submorphs: 	an Array(an ImageMorph(98435072))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (836383744) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98435072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(485812224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(121145344)
		submorphs: 	an Array(an ImageMorph(98435072))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (836383744) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98435072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(485812224)
	Arguments and temporary variables: 
		evt: 	[(917@231) mouseUp 67305542 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(121145344)
		submorphs: 	an Array(an ImageMorph(98435072))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (836383744) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98435072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(485812224)
	Arguments and temporary variables: 
		anEvent: 	[(917@231) mouseUp 67305542 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(121145344)
		submorphs: 	an Array(an ImageMorph(98435072))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (836383744) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(98435072)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(917@231) mouseUp 67305542 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(485812224)
	Receiver's instance variables: 
		timeStamp: 	67305542
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(917@231)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 2:00:16.023827 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:00:15.990913-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:00:15.990913-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(883587584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(607635968)
		submorphs: 	an Array(an ImageMorph(123551744))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994980352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(123551744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(883587584)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(607635968)
		submorphs: 	an Array(an ImageMorph(123551744))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994980352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(123551744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(883587584)
	Arguments and temporary variables: 
		evt: 	[(916@228) mouseUp 67355791 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(607635968)
		submorphs: 	an Array(an ImageMorph(123551744))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994980352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(123551744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(883587584)
	Arguments and temporary variables: 
		anEvent: 	[(916@228) mouseUp 67355791 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(607635968)
		submorphs: 	an Array(an ImageMorph(123551744))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994980352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(123551744)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(916@228) mouseUp 67355791 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(883587584)
	Receiver's instance variables: 
		timeStamp: 	67355791
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(916@228)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existeRecurso:
28 September 2018 2:01:11.800788 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existeRecurso: 'Proyector'
		exception: 	MessageNotUnderstood: Calendario>>existeRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList()


CalendarioTest>>test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCr...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:01:11.774544-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test09CalendarioNoDeberiaExistirR...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlC...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:01:11.774544-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test09CalendarioNoDeberiaExistirR...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09CalendarioNoDeberiaExistirRecursoPr...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAlCre...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(41952256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(402864640)
		submorphs: 	an Array(an ImageMorph(621302272))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (91811840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(621302272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(41952256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(402864640)
		submorphs: 	an Array(an ImageMorph(621302272))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (91811840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(621302272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(41952256)
	Arguments and temporary variables: 
		evt: 	[(918@207) mouseUp 67411573 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(402864640)
		submorphs: 	an Array(an ImageMorph(621302272))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (91811840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(621302272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(41952256)
	Arguments and temporary variables: 
		anEvent: 	[(918@207) mouseUp 67411573 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(402864640)
		submorphs: 	an Array(an ImageMorph(621302272))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (91811840) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test09CalendarioNoDeberiaExistirRecursoProyectorAl...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(621302272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(918@207) mouseUp 67411573 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(41952256)
	Receiver's instance variables: 
		timeStamp: 	67411573
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(918@207)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existeRecurso:
CalendarioTest>>test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existeRecurso:
28 September 2018 2:01:13.873363 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existeRecurso: 'Proyector'
		exception: 	MessageNotUnderstood: Calendario>>existeRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList()


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:01:13.846455-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test10CalendarioDeberiaContenerRe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:01:13.846455-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test10CalendarioDeberiaContenerRe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09CalendarioNoDeberiaExistirRecursoPr...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(994297344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(228666368)
		submorphs: 	an Array(an ImageMorph(532094976))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (798888960) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(532094976)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(994297344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(228666368)
		submorphs: 	an Array(an ImageMorph(532094976))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (798888960) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(532094976)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(994297344)
	Arguments and temporary variables: 
		evt: 	[(917@229) mouseUp 67413653 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(228666368)
		submorphs: 	an Array(an ImageMorph(532094976))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (798888960) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(532094976)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(994297344)
	Arguments and temporary variables: 
		anEvent: 	[(917@229) mouseUp 67413653 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(228666368)
		submorphs: 	an Array(an ImageMorph(532094976))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (798888960) [balloonText] 
		borderWidth: 	0
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(532094976)
		oldBorder: 	nil
		oldBorderStyle: 	nil
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(917@229) mouseUp 67413653 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(994297344)
	Receiver's instance variables: 
		timeStamp: 	67413653
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(917@229)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existeRecurso:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Calendario did not understand #existeRecurso:
28 September 2018 2:02:17.230927 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Calendario(Object)>>doesNotUnderstand: #existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		aMessage: 	existeRecurso: 'Proyector'
		exception: 	MessageNotUnderstood: Calendario>>existeRecurso:
		resumeValue: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList(a Recurso)


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:02:17.198568-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:02:17.198568-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09CalendarioNoDeberiaExistirRecursoPr...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(573527552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(139687936)
		submorphs: 	an Array(an ImageMorph(957596672))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (11603968) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(957596672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(573527552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(139687936)
		submorphs: 	an Array(an ImageMorph(957596672))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (11603968) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(957596672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(573527552)
	Arguments and temporary variables: 
		evt: 	[(918@290) mouseUp 67476997 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(139687936)
		submorphs: 	an Array(an ImageMorph(957596672))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (11603968) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(957596672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(573527552)
	Arguments and temporary variables: 
		anEvent: 	[(918@290) mouseUp 67476997 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(139687936)
		submorphs: 	an Array(an ImageMorph(957596672))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (11603968) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(957596672)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(918@290) mouseUp 67476997 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(573527552)
	Receiver's instance variables: 
		timeStamp: 	67476997
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(918@290)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
Calendario(Object)>>doesNotUnderstand: #existeRecurso:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 2:04:23.603992 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:04:23.590451-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:04:23.590451-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(458826240)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(513708032)
		submorphs: 	an Array(an ImageMorph(923761664))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (429791232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(923761664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(458826240)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(513708032)
		submorphs: 	an Array(an ImageMorph(923761664))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (429791232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(923761664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(458826240)
	Arguments and temporary variables: 
		evt: 	[(914@292) mouseUp 67603397 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(513708032)
		submorphs: 	an Array(an ImageMorph(923761664))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (429791232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(923761664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(458826240)
	Arguments and temporary variables: 
		anEvent: 	[(914@292) mouseUp 67603397 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@280.0) corner: (924.0@296.0)
		owner: 	a FTCellMorph(513708032)
		submorphs: 	an Array(an ImageMorph(923761664))
		fullBounds: 	(908.0@280.0) corner: (924.0@296.0)
		color: 	Color transparent
		extension: 	a MorphExtension (429791232) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(923761664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(914@292) mouseUp 67603397 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(458826240)
	Receiver's instance variables: 
		timeStamp: 	67603397
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(914@292)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 2:05:54.386133 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		calendario: 	a Calendario
		nuevoRecurso: 	a Recurso
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuego...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:05:54.356416-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLueg...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T14:05:54.356416-03:00
		failures: 	a Set(CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyecto...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAg...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregar...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test10CalendarioDeberi...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLuegoD...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(607909376)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(882003968)
		submorphs: 	an Array(an ImageMorph(422134272))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (599015936) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(422134272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(607909376)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(882003968)
		submorphs: 	an Array(an ImageMorph(422134272))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (599015936) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(422134272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(607909376)
	Arguments and temporary variables: 
		evt: 	[(920@226) mouseUp 67694148 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(882003968)
		submorphs: 	an Array(an ImageMorph(422134272))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (599015936) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(422134272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(607909376)
	Arguments and temporary variables: 
		anEvent: 	[(920@226) mouseUp 67694148 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@220.0) corner: (924.0@236.0)
		owner: 	a FTCellMorph(882003968)
		submorphs: 	an Array(an ImageMorph(422134272))
		fullBounds: 	(908.0@220.0) corner: (924.0@236.0)
		color: 	Color transparent
		extension: 	a MorphExtension (599015936) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test10CalendarioDeberiaContenerRecursoProyectorLue...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(422134272)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(920@226) mouseUp 67694148 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(607909376)
	Receiver's instance variables: 
		timeStamp: 	67694148
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(920@226)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 4:22:59.885744 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:22:59.859377-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:22:59.859377-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test13SeCreaUnRecursoP...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1044136960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(516376064)
		submorphs: 	an Array(an ImageMorph(1061442048))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (513601536) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1061442048)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1044136960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(516376064)
		submorphs: 	an Array(an ImageMorph(1061442048))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (513601536) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1061442048)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1044136960)
	Arguments and temporary variables: 
		evt: 	[(914@268) mouseUp 75919654 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(516376064)
		submorphs: 	an Array(an ImageMorph(1061442048))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (513601536) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1061442048)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1044136960)
	Arguments and temporary variables: 
		anEvent: 	[(914@268) mouseUp 75919654 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(516376064)
		submorphs: 	an Array(an ImageMorph(1061442048))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (513601536) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(1061442048)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(914@268) mouseUp 75919654 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1044136960)
	Receiver's instance variables: 
		timeStamp: 	75919654
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(914@268)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of LinkedList did not understand #include:
28 September 2018 4:30:17.2849 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

LinkedList(Object)>>doesNotUnderstand: #include:
	Receiver: a LinkedList(a Recurso)
	Arguments and temporary variables: 
		aMessage: 	include: 'Proyector'
		exception: 	MessageNotUnderstood: LinkedList>>include:
		resumeValue: 	nil
	Receiver's instance variables: 
		firstLink: 	ValueLink(a Recurso)
		lastLink: 	ValueLink(a Recurso)


Calendario>>existeRecurso:
	Receiver: a Calendario
	Arguments and temporary variables: 
		nombreRecurso: 	'Proyector'
		existe: 	nil
	Receiver's instance variables: 
		personas: 	a LinkedList()
		eventos: 	a LinkedList()
		recursos: 	a LinkedList(a Recurso)


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:30:17.25491-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:30:17.25491-03:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSe...etc...
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09CalendarioNoDeberiaExistirRecursoPr...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(833929728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(305447424)
		submorphs: 	an Array(an ImageMorph(632802304))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99321344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(632802304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(833929728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(305447424)
		submorphs: 	an Array(an ImageMorph(632802304))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99321344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(632802304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(833929728)
	Arguments and temporary variables: 
		evt: 	[(921@267) mouseUp 76357053 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(305447424)
		submorphs: 	an Array(an ImageMorph(632802304))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99321344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(632802304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(833929728)
	Arguments and temporary variables: 
		anEvent: 	[(921@267) mouseUp 76357053 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(305447424)
		submorphs: 	an Array(an ImageMorph(632802304))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (99321344) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(632802304)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
LinkedList(Object)>>doesNotUnderstand: #include:
Calendario>>existeRecurso:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 4:30:34.138357 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

CalendarioTest(TestAsserter)>>assert:
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		calendario: 	a Calendario
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


CalendarioTest(TestCase)>>performTest
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CalendarioTest(TestCase)>>runCase
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendari...etc...
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


CalendarioTest(TestCase)>>runCaseManaged
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:30:34.119693-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendar...etc...
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:30:34.119693-03:00
		failures: 	a Set(CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCal...etc...
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CalendarioTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CalendarioTest(TestCase)>>debug
	Receiver: CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDebe...etc...
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProy...etc...
		expectedFails: 	#()


CalendarioTest class(TestCase class)>>debug:
	Receiver: CalendarioTest
	Arguments and temporary variables: 
		aSymbol: 	#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyector...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01CalendarioNoDeberiaExistirJuanAlCrearse->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CalendarioTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#test13SeCreaUnRecursoP...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendario...etc...
		aBoolean: 	true
		testMethod: 	CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		testClass: 	CalendarioTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(620551680)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(358286848)
		submorphs: 	an Array(an ImageMorph(552571904))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (283492352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(552571904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(620551680)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(358286848)
		submorphs: 	an Array(an ImageMorph(552571904))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (283492352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(552571904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(620551680)
	Arguments and temporary variables: 
		evt: 	[(922@273) mouseUp 76373925 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(358286848)
		submorphs: 	an Array(an ImageMorph(552571904))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (283492352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(552571904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(620551680)
	Arguments and temporary variables: 
		anEvent: 	[(922@273) mouseUp 76373925 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@260.0) corner: (924.0@276.0)
		owner: 	a FTCellMorph(358286848)
		submorphs: 	an Array(an ImageMorph(552571904))
		fullBounds: 	(908.0@260.0) corner: (924.0@276.0)
		color: 	Color transparent
		extension: 	a MorphExtension (283492352) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{CalendarioTest>>#test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalenda...etc...
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(552571904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(922@273) mouseUp 76373925 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(620551680)
	Receiver's instance variables: 
		timeStamp: 	76373925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(922@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
CalendarioTest(TestAsserter)>>assert:
CalendarioTest>>test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario
CalendarioTest(TestCase)>>performTest
[ self setUp.
self performTest ] in CalendarioTest(TestCase)>>runCase
BlockClosure>>ensure:
CalendarioTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
CalendarioTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in CalendarioTest(TestCase)>>debug
BlockClosure>>ensure:
CalendarioTest(TestCase)>>debug
CalendarioTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
28 September 2018 4:31:52.108952 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

PruebasCalendario(TestAsserter)>>assert:
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


PruebasCalendario(TestAsserter)>>should:raise:
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 
		aBlock: 	[ calendario
	agregarEventoConNombre: 'Gran siesta'
	invitados: invitad...etc...
		anExceptionalEvent: 	nil
	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


PruebasCalendario>>test08RecursoNoAdmiteSuperposicion
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 
		calendario: 	a Calendario
		invitados: 	an OrderedCollection('Pedro' 'Cama')
	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


PruebasCalendario(TestCase)>>performTest
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


PruebasCalendario(TestCase)>>runCase
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PruebasCalendario(TestCase)>>runCaseManaged
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:31:52.080982-03:00
		failures: 	a Set(PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	142
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		timeStamp: 	2018-09-28T16:31:52.080982-03:00
		failures: 	a Set(PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PruebasCalendario(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


PruebasCalendario(TestCase)>>debug
	Receiver: PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#test08RecursoNoAdmiteSuperposicion
		expectedFails: 	#()


PruebasCalendario class(TestCase class)>>debug:
	Receiver: PruebasCalendario
	Arguments and temporary variables: 
		aSymbol: 	#test08RecursoNoAdmiteSuperposicion
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#test01AgregarPersonas->PruebasCalendario>>#test...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PruebasCalendario
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TP1-TestsCatedra'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#test09RemoverEvento) #failures->a Set(#te...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		aBoolean: 	true
		testMethod: 	PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion
		testClass: 	PruebasCalendario
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1051875328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(512474624)
		submorphs: 	an Array(an ImageMorph(119931904))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (285871616) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(119931904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1051875328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(512474624)
		submorphs: 	an Array(an ImageMorph(119931904))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (285871616) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(119931904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1051875328)
	Arguments and temporary variables: 
		evt: 	[(913@213) mouseUp 76451892 nil]
	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(512474624)
		submorphs: 	an Array(an ImageMorph(119931904))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (285871616) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(119931904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1051875328)
	Arguments and temporary variables: 
		anEvent: 	[(913@213) mouseUp 76451892 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(908.0@200.0) corner: (924.0@216.0)
		owner: 	a FTCellMorph(512474624)
		submorphs: 	an Array(an ImageMorph(119931904))
		fullBounds: 	(908.0@200.0) corner: (924.0@216.0)
		color: 	Color transparent
		extension: 	a MorphExtension (285871616) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PruebasCalendario>>#test08RecursoNoAdmiteSuperposicion. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(119931904)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil



--- The full stack ---
PruebasCalendario(TestAsserter)>>assert:
PruebasCalendario(TestAsserter)>>should:raise:
PruebasCalendario>>test08RecursoNoAdmiteSuperposicion
PruebasCalendario(TestCase)>>performTest
[ self setUp.
self performTest ] in PruebasCalendario(TestCase)>>runCase
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PruebasCalendario(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PruebasCalendario(TestCase)>>debug
BlockClosure>>ensure:
PruebasCalendario(TestCase)>>debug
PruebasCalendario class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------


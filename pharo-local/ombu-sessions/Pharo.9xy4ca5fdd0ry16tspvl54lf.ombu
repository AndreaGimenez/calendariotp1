OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:21:45.521017-03:00' ],		#prior : OmReference [ 'Pharo.ckad2yn2iy3xdg32qys32x6td', '3' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0 second: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 22:19',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:21',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:22:03.309436-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:21',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:22',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:23:29.599767-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:14',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:23',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:23:37.889752-03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 22:17',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\t\r \t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:23',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:24:39.490287-03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/26/2018 22:15',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 11:24',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:26:09.147204-03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:22',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: 5 day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: 5 day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:26',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:27:01.158916-03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: 5 day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: 5 day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:26',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:27',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T11:58:28.329449-03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:27',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: 5 day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: 5 day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:58',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:05:07.996181-03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: 5 day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: 5 day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 11:58',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 12:05',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:06:10.241684-03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 11:24',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   " self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:06:36.191607-03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   " self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:06:52.259683-03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:07:17.791068-03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:06',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:07:40.430641-03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:07:54.249585-03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:08:13.378878-03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 12:05',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar >= fechaInicioEvento ) and: [ fechaAAnalizar <= fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 12:08',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:08:33.618547-03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r   self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:07',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \t\tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:08',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:02.197074-03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \t\tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:08',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \t"self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:14.402175-03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \t"self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:20.436345-03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:33.889695-03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:44.741393-03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 1\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:09:49.918796-03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:10:53.963979-03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:09',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 29 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:10',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T12:11:17.067623-03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 29 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:10',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r   \tself assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/27/2018 12:11',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:38:31.596882-03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar >= fechaInicioEvento ) and: [ fechaAAnalizar <= fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 12:08',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:(self getAnio) month: 5 day: (self getDia)  hour: (self getHora) minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar >= fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/27/2018 13:38',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:39:47.770093-03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\').',			#stamp : 'TomasBustamante 9/16/2019 19:52',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    "self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\')."',			#stamp : 'andre 9/27/2018 13:39',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:40:06.31266-03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    "self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\')."',			#stamp : 'andre 9/27/2018 13:39',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\').',			#stamp : 'andre 9/27/2018 13:40',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:40:47.164798-03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla,			#protocol : #tests,			#sourceCode : 'test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla',			#stamp : 'andre 9/27/2018 13:40',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:41:58.25541-03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla,			#protocol : #tests,			#sourceCode : 'test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla',			#stamp : 'andre 9/27/2018 13:40',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla,			#protocol : #tests,			#sourceCode : 'test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla\r\t^true.',			#stamp : 'andre 9/27/2018 13:41',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:44:36.038638-03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #t,			#protocol : #tests,			#sourceCode : 't',			#stamp : 'andre 9/27/2018 13:44',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:45:27.63588-03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla,			#protocol : #tests,			#sourceCode : 'test08SeCreaUnRecursoCuyoNombreDeberiaSerParrilla\r\t^true.',			#stamp : 'andre 9/27/2018 13:41',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:46:12.215053-03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^true.',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:46:20.786758-03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\').',			#stamp : 'andre 9/27/2018 13:40',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    "calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\')."',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:46:43.152668-03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^true.',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^false.',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:47:33.295918-03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    "calendario agregarPersona: \'Pedro\'.\r    calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\')."',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test05AgregarRecursos,			#protocol : #test,			#sourceCode : 'test05AgregarRecursos\r\r    | calendario |\r\t\r    calendario := Calendario new.\r\t\r    self deny: (calendario existePersona: \'Pedro\').\r    self deny: (calendario existeRecurso: \'Proyector\').\r\t\r    calendario agregarPersona: \'Pedro\'.\r    "calendario agregarRecurso: \'Proyector\'.\r\t\r    self assert: (calendario existeRecurso: \'Proyector\')."',			#stamp : 'andre 9/27/2018 13:47',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:48:09.407496-03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #t,			#protocol : #tests,			#sourceCode : 't',			#stamp : 'andre 9/27/2018 13:44',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:55:06.460543-03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test09CalendarioNoDeberiaExistirRecursoAlCrearlo,			#protocol : #tests,			#sourceCode : 'test09CalendarioNoDeberiaExistirRecursoAlCrearlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\r',			#stamp : 'andre 9/27/2018 13:55',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:55:48.209275-03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo,			#protocol : #tests,			#sourceCode : 'test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\tself deny: (calendario existeRecurso: \'Proyector\').\r\r',			#stamp : 'andre 9/27/2018 13:55',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:56:02.089028-03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test09CalendarioNoDeberiaExistirRecursoAlCrearlo,			#protocol : #tests,			#sourceCode : 'test09CalendarioNoDeberiaExistirRecursoAlCrearlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\r',			#stamp : 'andre 9/27/2018 13:55',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:57:22.736647-03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r',			#stamp : 'andre 9/27/2018 13:57',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:58:12.136685-03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r',			#stamp : 'andre 9/27/2018 13:57',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario nuevoRecurso|\r\t\r\tcalendario := Calendario new.\r\t\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:58:40.034767-03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario nuevoRecurso|\r\t\r\tcalendario := Calendario new.\r\t\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario nuevoRecurso|\r\t\r\tcalendario := Calendario new.\r\t\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:58:47.015797-03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario nuevoRecurso|\r\t\r\tcalendario := Calendario new.\r\t\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:58:59.139178-03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:59:07.118615-03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^false.',			#stamp : 'andre 9/27/2018 13:46',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^true.',			#stamp : 'andre 9/27/2018 13:59',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T13:59:30.234321-03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo,			#protocol : #tests,			#sourceCode : 'test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\tself deny: (calendario existeRecurso: \'Proyector\').\r\r',			#stamp : 'andre 9/27/2018 13:55',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo,			#protocol : #tests,			#sourceCode : 'test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\tself deny: (calendario existeRecurso: \'Proyector\').\r"crear el metodo"\r',			#stamp : 'andre 9/27/2018 13:59',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:34:33.147767-03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Calendario\r\tinstanceVariableNames: \'personas eventos\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Calendario,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Calendario,						#isMetaSide : false					},					#name : #personas,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Calendario,						#isMetaSide : false					},					#name : #eventos,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Calendario class\r\tinstanceVariableNames: \'\''				},				#name : #'Calendario class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Calendario,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teventos:\t\t<Object>\r\tpersonas:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Calendario\r\tinstanceVariableNames: \'personas eventos recursos\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Calendario,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Calendario,						#isMetaSide : false					},					#name : #personas,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Calendario,						#isMetaSide : false					},					#name : #eventos,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Calendario,						#isMetaSide : false					},					#name : #recursos,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Calendario class\r\tinstanceVariableNames: \'\''				},				#name : #'Calendario class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Calendario,					#isMetaSide : false				},				#parent : @25,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teventos:\t\t<Object>\r\tpersonas:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:34:50.537186-03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t^true.',			#stamp : 'andre 9/27/2018 17:34',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t',			#stamp : 'andre 9/27/2018 17:34',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:36:04.33487-03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t',			#stamp : 'andre 9/27/2018 17:34',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'existeRecurso:',			#protocol : #accessing,			#sourceCode : 'existeRecurso: nombreRecurso\r\t| recursoPertenece |\r\t\r\trecursoPertenece := recursos includes: nombreRecurso.\r\t\r\t^recursoPertenece.',			#stamp : 'andre 9/27/2018 17:36',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:36:51.204714-03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tpersonas := LinkedList new.\r\teventos := LinkedList new.',			#stamp : 'andre 9/25/2018 19:50',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tpersonas := LinkedList new.\r\teventos := LinkedList new.\r\trecursos := LinkedList new.',			#stamp : 'andre 9/27/2018 17:36',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:40:05.899962-03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test11SeCreaUnRecursoProyectorDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test11SeCreaUnRecursoProyectorDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: nuevoRecurso getNombre equals: \'Proyector\'.',			#stamp : 'andre 9/27/2018 17:40',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:40:41.083051-03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Recurso,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''				},				#name : #'Recurso class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Recurso,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:40:44.475862-03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Recurso,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''				},				#name : #'Recurso class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Recurso,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:42:44.679087-03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #'as yet unclassified',			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:42',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:42:55.308912-03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpProtocolAddition {		#behavior : RGMetaclassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''			},			#name : #'Recurso class',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#baseClass : RGClassDefinition {				#annotations : IdentityDictionary {					#superclassName : 'Object',					#traitCompositionSource : '{}',					#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''				},				#name : #Recurso,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#metaClass : @7,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #Recurso,						#isMetaSide : false					},					#parent : @12,					#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',					#stamp : '<historical>'				},				#classVariables : OrderedCollection [ ],				#category : #TP1,				#package : #TP1,				#sharedPools : OrderedCollection [ ]			}		},		#protocol : #initialize	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:43:01.62624-03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpProtocolRemoval {		#behavior : RGMetaclassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''			},			#name : #'Recurso class',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#baseClass : RGClassDefinition {				#annotations : IdentityDictionary {					#superclassName : 'Object',					#traitCompositionSource : '{}',					#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''				},				#name : #Recurso,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#metaClass : @7,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #Recurso,						#isMetaSide : false					},					#parent : @12,					#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',					#stamp : '<historical>'				},				#classVariables : OrderedCollection [ ],				#category : #TP1,				#package : #TP1,				#sharedPools : OrderedCollection [ ]			}		},		#protocol : #initialize	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:43:10.473344-03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #'as yet unclassified',			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:42',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:42',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:43:59.774852-03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test11SeCreaUnRecursoProyectorDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test11SeCreaUnRecursoProyectorDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: nuevoRecurso getNombre equals: \'Proyector\'.',			#stamp : 'andre 9/27/2018 17:40',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test11SeCreaUnRecursoProyectorDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test11SeCreaUnRecursoProyectorDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\t"self assert: nuevoRecurso getNombre equals: \'Proyector\'."',			#stamp : 'andre 9/27/2018 17:43',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:44:22.164938-03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:42',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t"| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso."\r',			#stamp : 'andre 9/27/2018 17:44',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:44:39.367738-03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test11SeCreaUnRecursoProyectorDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test11SeCreaUnRecursoProyectorDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\t"self assert: nuevoRecurso getNombre equals: \'Proyector\'."',			#stamp : 'andre 9/27/2018 17:43',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test11SeCreaUnRecursoProyectorDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test11SeCreaUnRecursoProyectorDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: nuevoRecurso getNombre equals: \'Proyector\'.',			#stamp : 'andre 9/27/2018 17:44',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:45:16.697267-03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #'as yet unclassified',			#sourceCode : 'getNombre\r\t^\'Proyector\'.',			#stamp : 'andre 9/27/2018 17:45',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:45:16.75275-03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #'as yet unclassified',			#sourceCode : 'getNombre\r\t^\'Proyector\'.',			#stamp : 'andre 9/27/2018 17:45',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #accesing,			#sourceCode : 'getNombre\r\t^\'Proyector\'.',			#stamp : 'andre 9/27/2018 17:45',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:46:45.013901-03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t"| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t\r\t^nuevoRecurso."\r',			#stamp : 'andre 9/27/2018 17:44',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t"| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso ."\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:46',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:47:33.13248-03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test12SeCreaUnRecursoParrillaDeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test12SeCreaUnRecursoParrillaDeberiaDevolverTrue\r\r\t| nuevoRecurso |\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Parrilla\'.\r\t\r\tself assert: nuevoRecurso getNombre equals: \'Parrilla\'.',			#stamp : 'andre 9/27/2018 17:47',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:48:28.900577-03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #accesing,			#sourceCode : 'getNombre\r\t^\'Proyector\'.',			#stamp : 'andre 9/27/2018 17:45',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #accesing,			#sourceCode : 'getNombre\r\t| nombre |\r\t^nombre.',			#stamp : 'andre 9/27/2018 17:48',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:49:08.855238-03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Recurso,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''				},				#name : #'Recurso class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Recurso,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Recurso\r\tinstanceVariableNames: \'nombre\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1\''			},			#name : #Recurso,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Recurso,						#isMetaSide : false					},					#name : #nombre,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Recurso class\r\tinstanceVariableNames: \'\''				},				#name : #'Recurso class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Recurso,					#isMetaSide : false				},				#parent : @21,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1,			#package : #TP1,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:49:24.940837-03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #accesing,			#sourceCode : 'getNombre\r\t| nombre |\r\t^nombre.',			#stamp : 'andre 9/27/2018 17:48',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #getNombre,			#protocol : #accesing,			#sourceCode : 'getNombre\r\t^nombre.',			#stamp : 'andre 9/27/2018 17:49',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:50:11.331281-03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Recurso,				#isMetaSide : false			},			#name : #'setNombre:',			#protocol : #accesing,			#sourceCode : 'setNombre: nombreRecurso\r\tnombre := nombreRecurso.',			#stamp : 'andre 9/27/2018 17:50',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:51:19.1944-03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t"| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso ."\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:46',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:51',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:51:47.126019-03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso .\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:51',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Recurso class',				#isMetaSide : true			},			#name : #'inicializarConNombre:',			#protocol : #initialize,			#sourceCode : 'inicializarConNombre: nombreRecurso\r\t\r\t| nuevoRecurso |\r\tnuevoRecurso := Recurso new.\r\t\r\tnuevoRecurso setNombre: nombreRecurso.\r\t\r\t^nuevoRecurso.\r',			#stamp : 'andre 9/27/2018 17:51',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:53:03.595071-03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario |\r\t\r\tcalendario := Calendario new.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 13:58',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo,			#protocol : #tests,			#sourceCode : 'test10CalendarioDeberiaContenerRecursoProyectorLuegoDeCrearloYAgregarlo\r\r\t| calendario nuevoRecurso |\r\t\r\tcalendario := Calendario new.\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 17:53',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:54:17.105099-03:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario,			#protocol : #tests,			#sourceCode : 'test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario\r',			#stamp : 'andre 9/27/2018 17:54',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:54:26.2326-03:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario,			#protocol : #tests,			#sourceCode : 'test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario\r',			#stamp : 'andre 9/27/2018 17:54',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario,			#protocol : #tests,			#sourceCode : 'test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario\r\r| calendario nuevoRecurso |\r\t\r\tcalendario := Calendario new.\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 17:54',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:55:48.748942-03:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario,			#protocol : #tests,			#sourceCode : 'test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario\r\r| calendario nuevoRecurso |\r\t\r\tcalendario := Calendario new.\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r',			#stamp : 'andre 9/27/2018 17:54',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario,			#protocol : #tests,			#sourceCode : 'test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario\r\r\t| calendario nuevoRecurso |\r\t\r\tcalendario := Calendario new.\r\t\r\tnuevoRecurso := Recurso inicializarConNombre: \'Proyector\'.\r\t\r\tcalendario agregarRecurso: nuevoRecurso.\r\t\r\tself assert: (calendario existeRecurso: \'Proyector\').\r\r',			#stamp : 'andre 9/27/2018 17:55',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:57:42.268354-03:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #agregarRecurso,			#protocol : #accessing,			#sourceCode : 'agregarRecurso',			#stamp : 'andre 9/27/2018 17:57',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:58:01.634607-03:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarRecurso:',			#protocol : #accessing,			#sourceCode : 'agregarRecurso: nuevoRecurso\r',			#stamp : 'andre 9/27/2018 17:58',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:58:07.224535-03:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #agregarRecurso,			#protocol : #accessing,			#sourceCode : 'agregarRecurso',			#stamp : 'andre 9/27/2018 17:57',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:58:17.342767-03:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarRecurso:',			#protocol : #accessing,			#sourceCode : 'agregarRecurso: nuevoRecurso\r',			#stamp : 'andre 9/27/2018 17:58',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarRecurso:',			#protocol : #accessing,			#sourceCode : 'agregarRecurso: nuevoRecurso\r\trecursos add: nuevoRecurso.',			#stamp : 'andre 9/27/2018 17:58',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-27T17:59:33.098352-03:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarRecurso:',			#protocol : #accessing,			#sourceCode : 'agregarRecurso: nuevoRecurso\r\trecursos add: nuevoRecurso.',			#stamp : 'andre 9/27/2018 17:58',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarRecurso:',			#protocol : #accessing,			#sourceCode : 'agregarRecurso: nuevoRecurso\r\r\trecursos add: nuevoRecurso.',			#stamp : 'andre 9/27/2018 17:59',			#package : #TP1		}	}}
OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T11:46:50.565846-03:00' ],		#prior : OmReference [ 'Pharo.82gfwmu0mo4poum08pk4n33zc', '21' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\r\t\r   ocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 11:05',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\r\t\r\tocupado := false. \r\t\r   eventos anySatisfy: [ :evento | (evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora)\r\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ocupado := true ]  ].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 11:46',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T11:50:16.945921-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado :=   [   \t( ( self getInvitados ) includes: nombrePersona ) and: \r                                      [ ( ( self getAnio ) = unAnio ) ] and: \r                                      [ ( ( self getMes ) = unMes ) ] and: \r                                      [ ( ( self getDia ) = unDia ) ] and: \r                                      [ ( ( self getHora ) = unaHora ) ]\r\t\t                             ] .\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 11:29',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := false.\r\t\r\t"ocupado :=   [   \t( ( self getInvitados ) includes: nombrePersona ) and: \r                                      [ ( ( self getAnio ) = unAnio ) ] and: \r                                      [ ( ( self getMes ) = unMes ) ] and: \r                                      [ ( ( self getDia ) = unDia ) ] and: \r                                      [ ( ( self getHora ) = unaHora ) ]\r\t\t                             ] ."\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 11:50',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T11:52:46.033112-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\r\t\r\tocupado := false. \r\t\r   eventos anySatisfy: [ :evento | (evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora)\r\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ocupado := true ]  ].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 11:46',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 11:52',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:50:04.851234-03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 11:52',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 12:50',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:51:00.529502-03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado.\r\t\r"   ocupado := eventos anySatisfy: [ :evento | ( ( ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio ] ) and: \r                                    [ ( evento getMes ) = unMes ] ) and: \r                                    [ ( evento getDia ) = unDia ] ) and: \r                                    [ ( evento getHora ) = unaHora ] \r\t\t\t\t\t]."',			#stamp : 'andre 9/26/2018 12:50',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 12:51',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:51:47.625659-03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado |\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 12:51',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 12:51',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:52:09.652848-03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := false.\r\t\r\t"ocupado :=   [   \t( ( self getInvitados ) includes: nombrePersona ) and: \r                                      [ ( ( self getAnio ) = unAnio ) ] and: \r                                      [ ( ( self getMes ) = unMes ) ] and: \r                                      [ ( ( self getDia ) = unDia ) ] and: \r                                      [ ( ( self getHora ) = unaHora ) ]\r\t\t                             ] ."\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 11:50',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado eventos |\r\t\r\tocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 12:52',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:55:29.010354-03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado eventos |\r\t\r\tocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 12:52',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     [ ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ] ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 12:55',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T12:56:16.744086-03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ]\r\t\t\t\t\t].\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 12:51',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 12:56',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:01:16.13061-03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     [ ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ] ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 12:55',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ) ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:01',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:04:47.107284-03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ) ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:01',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     "( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )" true ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:04',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:09:23.372087-03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 13:06',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t\r"( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ] )"',			#stamp : 'andre 9/26/2018 13:09',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:11:23.57141-03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     "( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )" true ifTrue: [ocupado := true].\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:04',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true].\r\r\t\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:11',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:11:37.907858-03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true].\r\r\t\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:11',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true].\r\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:11',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:12:17.318541-03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t\r"( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ] )"',			#stamp : 'andre 9/26/2018 13:09',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t',			#stamp : 'andre 9/26/2018 13:12',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:13:15.233843-03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\tocupado := false .\r\t\r                     ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true].\r\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:11',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado evento |\r\tocupado := false .\r\t\r                    "  ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true]."\rocupado := ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:13',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:13:48.443484-03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado evento |\r\tocupado := false .\r\t\r                    "  ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true]."\rocupado := ( ( ( evento getInvitados ) includes: nombrePersona ) and: \r                                    [ ( evento getAnio ) = unAnio   and: \r                                    [ ( evento getMes ) = unMes   and: \r                                    [ ( evento getDia ) = unDia   and: \r                                    [ ( evento getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:13',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado evento |\r\tocupado := false .\r\t\r                    "  ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true]."\rocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:13',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:14:17.425308-03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado evento |\r\tocupado := false .\r\t\r                    "  ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] )ifTrue: [ocupado := true]."\rocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:13',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Evento,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r                                    [ ( self getAnio ) = unAnio   and: \r                                    [ ( self getMes ) = unMes   and: \r                                    [ ( self getDia ) = unDia   and: \r                                    [ ( self getHora ) = unaHora ] ] ] ] ).\r\t^ocupado.\r\t\t\t\t\t',			#stamp : 'andre 9/26/2018 13:14',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:17:21.980963-03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t^true.',			#stamp : 'andre 9/26/2018 13:17',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:17:47.599023-03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test03AgregarEventoSemanal,			#protocol : #test,			#sourceCode : 'test03AgregarEventoSemanal\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana "\r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/25/2018 23:48',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test03AgregarEventoSemanal,			#protocol : #test,			#sourceCode : 'test03AgregarEventoSemanal\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."',			#stamp : 'andre 9/26/2018 13:17',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:18:03.718564-03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test03AgregarEventoSemanal,			#protocol : #test,			#sourceCode : 'test03AgregarEventoSemanal\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."',			#stamp : 'andre 9/26/2018 13:17',			#package : #TP1-TestsCatedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PruebasCalendario,				#isMetaSide : false			},			#name : #test03AgregarEventoSemanal,			#protocol : #test,			#sourceCode : 'test03AgregarEventoSemanal\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/26/2018 13:18',			#package : #TP1-TestsCatedra		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:18:18.942397-03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t^true.',			#stamp : 'andre 9/26/2018 13:17',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t',			#stamp : 'andre 9/26/2018 13:18',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:18:40.243829-03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\rocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\r\t\t\t\t\t\r\t\t\t\t\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t',			#stamp : 'andre 9/26/2018 13:12',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t',			#stamp : 'andre 9/26/2018 13:18',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:19:39.983475-03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t',			#stamp : 'andre 9/26/2018 13:18',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado cantidadSemanas |\r\t\r\tcantidadSemanas := self getSemanas.',			#stamp : 'andre 9/26/2018 13:19',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:20:15.269967-03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado cantidadSemanas |\r\t\r\tcantidadSemanas := self getSemanas.',			#stamp : 'andre 9/26/2018 13:19',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado cantidadSemanas |\r\t\r\tcantidadSemanas := self getSemanas.\r\t\r\tocupado := true .\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 13:20',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:21:04.449792-03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #FechaTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1-Tests\''			},			#name : #FechaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FechaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'FechaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FechaTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #TP1-Tests,			#package : #TP1-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:21:08.148663-03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #FechaTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1-Tests\''			},			#name : #FechaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FechaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'FechaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FechaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1-Tests,			#package : #TP1-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:21:20.239236-03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #FechaTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'TP1-Tests\''			},			#name : #FechaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FechaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'FechaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FechaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #TP1-Tests,			#package : #TP1-Tests,			#sharedPools : OrderedCollection [ ]		},		#protocol : #test	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:23:22.48068-03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#FechaTest ))'	}}OmEntry {	#tags : {		#author : 'andre',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2018-09-26T13:23:22.584757-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #FechaTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'TP1-Tests\''			},			#name : #FechaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FechaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteFechaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteFechaTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #TP1-Tests,			#package : #TP1-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:26:17.150303-03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombre,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombre',			#stamp : 'andre 9/26/2018 13:26',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:27:18.472995-03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\r"test04SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\t| nuevoEvento |\r\t\r\tnuevoEvento := Evento inicializarConNombre: \'Asado\' conInvitados: \'Pedro\' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.\r\t\r\tself assert: nuevoEvento getNombre equals: \'Asado\'.\r\tself assert: nuevoEvento getInvitados equals: \'Pedro\'.\r\tself assert: nuevoEvento getAnio equals: 2019.\r\tself assert: nuevoEvento getMes equals: 11.\r\tself assert: nuevoEvento getDia equals: 4.\r\tself assert: nuevoEvento getHora equals: 10."',			#stamp : 'andre 9/26/2018 13:27',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:27:37.603879-03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombre,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombre',			#stamp : 'andre 9/26/2018 13:26',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:28:40.86306-03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\r\t| nuevoEventoSemanal |\r\t\r\tnuevoEventoSemanal  := EventoSemanal inicializarConNombre: \'Asado\' conInvitados: \'Pedro\' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.\r\t\r\tself assert: nuevoEventoSemanal getNombre equals: \'Asado\'.\r\tself assert: nuevoEventoSemanal getInvitados equals: \'Pedro\'.\r\tself assert: nuevoEventoSemanal getAnio equals: 2019.\r\tself assert: nuevoEventoSemanal getMes equals: 11.\r\tself assert: nuevoEventoSemanal getDia equals: 4.\r\tself assert: nuevoEventoSemanal getHora equals: 10.',			#stamp : 'andre 9/26/2018 13:28',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:29:04.956608-03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\r"test04SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\t| nuevoEvento |\r\t\r\tnuevoEvento := Evento inicializarConNombre: \'Asado\' conInvitados: \'Pedro\' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.\r\t\r\tself assert: nuevoEvento getNombre equals: \'Asado\'.\r\tself assert: nuevoEvento getInvitados equals: \'Pedro\'.\r\tself assert: nuevoEvento getAnio equals: 2019.\r\tself assert: nuevoEvento getMes equals: 11.\r\tself assert: nuevoEvento getDia equals: 4.\r\tself assert: nuevoEvento getHora equals: 10."',			#stamp : 'andre 9/26/2018 13:27',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:30:54.520409-03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11).',			#stamp : 'andre 9/26/2018 13:30',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:31:28.589091-03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11).',			#stamp : 'andre 9/26/2018 13:31',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:31:36.044514-03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11).',			#stamp : 'andre 9/26/2018 13:30',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:32:49.45316-03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11).',			#stamp : 'andre 9/26/2018 13:31',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t"| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11)."',			#stamp : 'andre 9/26/2018 13:32',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:33:32.164111-03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r" \r\t| calendario invitados |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\t invitados := OrderedCollection new.\r    invitados add: \'Pedro\'.\r\t calendario agregarEventoConNombre: \'Siesta\'\r               invitados: invitados\r               enAnio: 2019 mes: 5 dia: 4 hora: 10. " \r\t\r\t"| calendario |\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\tself deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 4 hora: 11)."',			#stamp : 'andre 9/26/2018 13:33',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/26/2018 13:33',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:38:16.613087-03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado cantidadSemanas |\r\t\r\tcantidadSemanas := self getSemanas.\r\t\r\tocupado := true .\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 13:20',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado duracionEvento fechaInicioEvento|\r\t\r\tduracionEvento := self getSemanas.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 13:38',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:38:32.873172-03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado duracionEvento fechaInicioEvento|\r\t\r\tduracionEvento := self getSemanas.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 13:38',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| duracionEvento fechaInicioEvento|\r\t\r\tduracionEvento := self getSemanas.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r',			#stamp : 'andre 9/26/2018 13:38',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:40:30.023393-03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| duracionEvento fechaInicioEvento|\r\t\r\tduracionEvento := self getSemanas.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r',			#stamp : 'andre 9/26/2018 13:38',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| duracionEventoDias fechaInicioEvento|\r\t\r\tduracionEventoDias:= (self getSemanas) * 7.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r',			#stamp : 'andre 9/26/2018 13:40',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:43:49.721631-03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| duracionEventoDias fechaInicioEvento|\r\t\r\tduracionEventoDias:= (self getSemanas) * 7.\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora.\r\t\r',			#stamp : 'andre 9/26/2018 13:40',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t',			#stamp : 'andre 9/26/2018 13:43',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:45:10.884133-03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t',			#stamp : 'andre 9/26/2018 13:43',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\t\r\t',			#stamp : 'andre 9/26/2018 13:45',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T13:47:08.074294-03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\t\r\t',			#stamp : 'andre 9/26/2018 13:45',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\t\r\t\r\t"ocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [  ] )."\r\t',			#stamp : 'andre 9/26/2018 13:47',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:02:16.931263-03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaInicioEvento := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\t\r\t\r\t"ocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [  ] )."\r\t',			#stamp : 'andre 9/26/2018 13:47',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t"| fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ fechaAAnalizar ] )."\r',			#stamp : 'andre 9/26/2018 14:02',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:08:29.320111-03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t"| fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ fechaAAnalizar ] )."\r',			#stamp : 'andre 9/26/2018 14:02',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:08',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:08:58.121165-03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/26/2018 13:33',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/26/2018 14:08',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:10:39.944181-03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:08',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:10',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:15:34.224241-03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\r\t| nuevoEventoSemanal |\r\t\r\tnuevoEventoSemanal  := EventoSemanal inicializarConNombre: \'Asado\' conInvitados: \'Pedro\' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.\r\t\r\tself assert: nuevoEventoSemanal getNombre equals: \'Asado\'.\r\tself assert: nuevoEventoSemanal getInvitados equals: \'Pedro\'.\r\tself assert: nuevoEventoSemanal getAnio equals: 2019.\r\tself assert: nuevoEventoSemanal getMes equals: 11.\r\tself assert: nuevoEventoSemanal getDia equals: 4.\r\tself assert: nuevoEventoSemanal getHora equals: 10.',			#stamp : 'andre 9/26/2018 13:28',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue,			#protocol : #tests,			#sourceCode : 'test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue\r\r\t| nuevoEventoSemanal |\r\t\r\tnuevoEventoSemanal := EventoSemanal inicializarConNombre: \'Asado\' conCantidadSemanas: 3 conInvitados: \'Pedro\' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.\r\t\r\tself assert: nuevoEventoSemanal getNombre equals: \'Asado\'.\r\tself assert: nuevoEventoSemanal getSemanas equals: 3.\r\tself assert: nuevoEventoSemanal getInvitados equals: \'Pedro\'.\r\tself assert: nuevoEventoSemanal getAnio equals: 2019.\r\tself assert: nuevoEventoSemanal getMes equals: 11.\r\tself assert: nuevoEventoSemanal getDia equals: 4.\r\tself assert: nuevoEventoSemanal getHora equals: 10.',			#stamp : 'andre 9/26/2018 14:15',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:20:13.068649-03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r    " ocupado por 3 semanas "\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).',			#stamp : 'andre 9/26/2018 14:08',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r',			#stamp : 'andre 9/26/2018 14:20',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:20:47.35389-03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r',			#stamp : 'andre 9/26/2018 14:20',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:20',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:21:27.680723-03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:20',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: \'Pedro\' "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:21',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:22:03.263287-03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: \'Pedro\' "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:21',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:22',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:35:01.8962-03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:10',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:35',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:35:11.087064-03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:35',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0 second: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:35',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:37:31.129733-03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:22',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:37',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:38:09.094991-03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'agregarEventoSemanalConNombre: nombre semanas: cuantasSemanas invitados: invitados enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| nuevoEvento |\r\t\r\tnuevoEvento := EventoSemanal inicializarConNombre: nombre  conCantidadSemanas: cuantasSemanas conInvitados: invitados  enAnio: unAnio  enMes: unMes  enDia: unDia  yEnHora: unaHora. \r\t\r\teventos add: nuevoEvento.\r\t',			#stamp : 'andre 9/25/2018 23:45',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'agregarEventoSemanalConNombre:semanas:invitados:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'agregarEventoSemanalConNombre: nombre semanas: cuantasSemanas invitados: invitados enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| nuevoEventoSemanal |\r\t\r\tnuevoEventoSemanal := EventoSemanal inicializarConNombre: nombre  conCantidadSemanas: cuantasSemanas conInvitados: invitados  enAnio: unAnio  enMes: unMes  enDia: unDia  yEnHora: unaHora. \r\t\r\teventos add: nuevoEventoSemanal.\r\t',			#stamp : 'andre 9/26/2018 14:38',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:39:59.858039-03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:37',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:39',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:40:41.946372-03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:39',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario existePersona: \'Pedro\').\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:40',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:41:00.008892-03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario existePersona: \'Pedro\').\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:40',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario existePersona: \'Pedro\').\r\tself deny: (calendario existePersona: \'Juan\').\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:40',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:41:28.480038-03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\tself assert: (calendario existePersona: \'Pedro\').\r\tself deny: (calendario existePersona: \'Juan\').\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:40',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:41',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:42:10.844504-03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:41',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:42',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:44:28.624056-03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tself assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10).\r',			#stamp : 'andre 9/26/2018 14:42',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\t\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:44',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:45:04.20598-03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #getEventos,			#protocol : #accessing,			#sourceCode : 'getEventos\r\t^eventos.',			#stamp : 'andre 9/26/2018 14:45',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:47:36.019609-03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\t\r\t"self assert: (calendario estaOcupado: \'Pedro\'\r\t                           enAnio: 2019 mes: 5 dia: 4 hora: 10)."\r',			#stamp : 'andre 9/26/2018 14:44',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:47',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:48:38.153249-03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:47',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:48',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:49:38.950923-03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r    calendario agregarPersona: \'Pedro\'.\r\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:48',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:49',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:49:46.242513-03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \'hola\'].',			#stamp : 'andre 9/26/2018 14:49',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \' chau\'].',			#stamp : 'andre 9/26/2018 14:49',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T14:50:55.497778-03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario listaEventos|\r\r    calendario := Calendario new.\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifTrue: [Transcript show: \'hola\'].\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r\tlistaEventos := calendario getEventos.\r\t(listaEventos isEmpty) ifFalse: [Transcript show: \' chau\'].',			#stamp : 'andre 9/26/2018 14:49',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r',			#stamp : 'andre 9/26/2018 14:50',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T15:00:34.03197-03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\r',			#stamp : 'andre 9/26/2018 14:50',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/26/2018 15:00',			#package : #TP1-Tests		}	}}
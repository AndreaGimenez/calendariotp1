OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T22:15:17.814426-03:00' ],		#prior : OmReference [ 'Pharo.53wevamu0g1xfw663he4tt8ff', '72' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10).\r\r    " desocupado la cuarta semana " \r    self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10).\r',			#stamp : 'andre 9/26/2018 15:00',			#package : #TP1-Tests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CalendarioTest,				#isMetaSide : false			},			#name : #test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10,			#protocol : #tests,			#sourceCode : 'test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10\r\r    | calendario |\r\r    calendario := Calendario new.\r\r    calendario agregarPersona: \'Pedro\'.\r\t\r    calendario agregarEventoSemanalConNombre: \'Siesta\'\r               semanas: 3\r               invitados: #(\'Pedro\') "coleccion de un string"\r               enAnio: 2019 mes: 5 dia: 4 hora: 10.\r\t" ocupado por 3 semanas "\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 4 hora: 10).\r    "self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 11 hora: 10).\r    self assert: (calendario estaOcupado: \'Pedro\'\r                             enAnio: 2019 mes: 5 dia: 18 hora: 10)."\r\r    " desocupado la cuarta semana " \r    "self deny: (calendario estaOcupado: \'Pedro\'\r                           enAnio: 2019 mes: 5 dia: 25 hora: 10)."\r',			#stamp : 'andre 9/26/2018 22:15',			#package : #TP1-Tests		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T22:17:01.648743-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"\r\t',			#stamp : 'andre 9/26/2018 13:18',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Calendario,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accessing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\r\t| ocupado |\r\t\r\tocupado := eventos anySatisfy: [ :evento | evento estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora ].\t\r \t\r\t^ocupado. "CREAR CLASE FECHA"',			#stamp : 'andre 9/26/2018 22:17',			#package : #TP1		}	}}OmEntry {	#tags : {		#author : 'andre',		#time : DateAndTime [ '2018-09-26T22:19:38.681737-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0 second: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: [ (fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 14:35',			#package : #TP1		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EventoSemanal,				#isMetaSide : false			},			#name : #'estaOcupado:enAnio:mes:dia:hora:',			#protocol : #accesing,			#sourceCode : 'estaOcupado: nombrePersona enAnio: unAnio mes: unMes dia: unDia hora: unaHora\r\t\r\t| ocupado fechaAAnalizar fechaInicioEvento fechaFinalEvento |\r\t\r\tfechaAAnalizar := DateAndTime year: unAnio month: unMes day: unDia  hour: unaHora minute: 0 second: 0.\r\t\r\tfechaInicioEvento := DateAndTime year:[ self getAnio ] month: [ self getMes ] day: [ self getDia ]  hour: [ self getHora ] minute: 0 second: 0.\r\t\r\tfechaFinalEvento := fechaInicioEvento + (Duration weeks: self getSemanas).\r\t\r\tocupado := ( ( ( self getInvitados ) includes: nombrePersona ) and: \r\t[ ( fechaAAnalizar > fechaInicioEvento ) and: [ fechaAAnalizar < fechaFinalEvento ] ] ).\r\t\r\t^ocupado.',			#stamp : 'andre 9/26/2018 22:19',			#package : #TP1		}	}}
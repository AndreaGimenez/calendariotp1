TestCase subclass: #CalendarioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/28/2018 16:24'!test13SeCreaUnRecursoProyectorYSeLoAgregaAlCalendarioRecursoProyectorDeberiaExistirEnCalendario	| calendario |		calendario := Calendario new.		calendario agregarRecurso: 'Proyector'.		self assert: (calendario existeRecurso: 'Proyector').! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/23/2018 15:29'!test01CalendarioNoDeberiaExistirJuanAlCrearse    | calendario |	    calendario := Calendario new.	    self deny: (calendario existePersona: 'Juan').! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/25/2018 19:42'!test02CalendarioDeberiaExistirJuanLuegoDeAgregarlo	"Arrange"	| calendario |	calendario := Calendario new.		"Act"	calendario agregarPersona: 'Juan'.		"Assert"	self assert: (calendario existePersona: 'Juan').	! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/27/2018 12:11'!test07CalendarioDeberiaTenerUnEventoSemanalConNombreSiestaSemanas1InvitadoPedroEnAnio2019Mes5Dia4Hora10    | calendario |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.	    calendario agregarEventoSemanalConNombre: 'Siesta'               semanas: 3               invitados: #('Pedro') "coleccion de un string"               enAnio: 2019 mes: 5 dia: 4 hora: 10.	" ocupado por 3 semanas "    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 4 hora: 10).   	self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 11 hora: 10).    self assert: (calendario estaOcupado: 'Pedro'                             enAnio: 2019 mes: 5 dia: 18 hora: 10).    " desocupado la cuarta semana "     self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 25 hora: 10).! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/25/2018 19:44'!test04SeCreaUnEventoconNombreAsadoInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue	| nuevoEvento |		nuevoEvento := Evento inicializarConNombre: 'Asado' conInvitados: 'Pedro' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.		self assert: nuevoEvento getNombre equals: 'Asado'.	self assert: nuevoEvento getInvitados equals: 'Pedro'.	self assert: nuevoEvento getAnio equals: 2019.	self assert: nuevoEvento getMes equals: 11.	self assert: nuevoEvento getDia equals: 4.	self assert: nuevoEvento getHora equals: 10.! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/25/2018 19:38'!test05CalendarioDeberiaTenerUnEventoConNombreSiestaInvitadoPedroEnAnio2019Mes5Dia4Hora10	| calendario invitados |    calendario := Calendario new.    calendario agregarPersona: 'Pedro'.	 invitados := OrderedCollection new.    invitados add: 'Pedro'.	 calendario agregarEventoConNombre: 'Siesta'               invitados: invitados               enAnio: 2019 mes: 5 dia: 4 hora: 10.		self assert: (calendario estaOcupado: 'Pedro'	                           enAnio: 2019 mes: 5 dia: 4 hora: 10).	self deny: (calendario estaOcupado: 'Pedro'                           enAnio: 2019 mes: 5 dia: 4 hora: 11).! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/27/2018 17:44'!test11SeCreaUnRecursoProyectorDeberiaDevolverTrue	| nuevoRecurso |		nuevoRecurso := Recurso inicializarConNombre: 'Proyector'.		self assert: nuevoRecurso getNombre equals: 'Proyector'.! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/27/2018 13:59'!test09CalendarioNoDeberiaExistirRecursoProyectorAlCrearlo	| calendario |		calendario := Calendario new.	self deny: (calendario existeRecurso: 'Proyector')."crear el metodo"! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/26/2018 14:15'!test06SeCreaUnEventoSemanalConNombreAsadoSemanas3InvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue	| nuevoEventoSemanal |		nuevoEventoSemanal := EventoSemanal inicializarConNombre: 'Asado' conCantidadSemanas: 3 conInvitados: 'Pedro' enAnio: 2019 enMes: 11 enDia: 4 yEnHora: 10.		self assert: nuevoEventoSemanal getNombre equals: 'Asado'.	self assert: nuevoEventoSemanal getSemanas equals: 3.	self assert: nuevoEventoSemanal getInvitados equals: 'Pedro'.	self assert: nuevoEventoSemanal getAnio equals: 2019.	self assert: nuevoEventoSemanal getMes equals: 11.	self assert: nuevoEventoSemanal getDia equals: 4.	self assert: nuevoEventoSemanal getHora equals: 10.! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/27/2018 17:47'!test12SeCreaUnRecursoParrillaDeberiaDevolverTrue	| nuevoRecurso |		nuevoRecurso := Recurso inicializarConNombre: 'Parrilla'.		self assert: nuevoRecurso getNombre equals: 'Parrilla'.! !!CalendarioTest methodsFor: 'tests' stamp: 'andre 9/25/2018 19:38'!test03SeCreaUnEventoconNombreSiestaInvitadosPedroEnAnio2019Mes5Dia4Hora10DeberiaDevolverTrue	| nuevoEvento |		nuevoEvento := Evento inicializarConNombre: 'Siesta' conInvitados: 'Pedro' enAnio: 2019 enMes: 5 enDia: 4 yEnHora: 10.		self assert: nuevoEvento getNombre equals: 'Siesta'.	self assert: nuevoEvento getInvitados equals: 'Pedro'.	self assert: nuevoEvento getAnio equals: 2019.	self assert: nuevoEvento getMes equals: 5.	self assert: nuevoEvento getDia equals: 4.	self assert: nuevoEvento getHora equals: 10.! !